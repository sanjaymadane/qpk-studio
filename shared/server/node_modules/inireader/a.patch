diff --git a/lib/inireadercore.js b/lib/inireadercore.js
index c45e7ef..9bfd3f8 100644
--- a/lib/inireadercore.js
+++ b/lib/inireadercore.js
@@ -7,6 +7,7 @@
  * @final
  * @private
  */
+var util = require('./util');
 var skipLineRex = /^\s*(\n|\#|;)/,
     /**
      * Regular expression to find non whitespace characters
@@ -44,19 +45,6 @@ var skipLineRex = /^\s*(\n|\#|;)/,
 
 /*jslint regexp: false*/
 
-
-function isFunc(arg) {
-    return typeof arg === 'function';
-}
-
-function isArray(arg) {
-    if (Array.isArray) {
-        return Array.isArray(arg);
-    } else {
-        return Object.prototype.toString.call(arg) === '[object Array]';
-    }
-}
-
 function getObjKey(obj, key) {
     return key.split('.').reduce(function (obj, key) {
         if (obj && typeof obj[key] !== 'undefined') {
@@ -187,7 +175,7 @@ function deepCopy(sourceObj, destinationObj) {
     var out = destinationObj || {};
     Object.keys(sourceObj).forEach(function (key) {
         if (typeof sourceObj[key] === 'object') {
-            out[key] = (isArray(sourceObj[key]) ? [] : {});
+            out[key] = (util.isArray(sourceObj[key]) ? [] : {});
             deepCopy(sourceObj[key], out[key]);
         } else {
             out[key] = sourceObj[key];
@@ -375,7 +363,7 @@ IniReaderCore.prototype.parseFile = function parseFile() {
                         currentValue = output[currentSection][keyVal.key];
 
                         if (typeof currentValue !== 'undefined' && this.multiValue) {
-                            if (isArray(currentValue)) {
+                            if (util.isArray(currentValue)) {
                                 currentValue.push(fixQuoted(keyVal.value));
                             } else {
                                 output[currentSection][keyVal.key] = [currentValue, fixQuoted(keyVal.value)];
@@ -470,6 +458,11 @@ IniReaderCore.prototype.getParam = function getParam(param) {
         key;
 
     if (param) {
+
+        if (util.isArray(param)) {
+            param = param.join('.');
+        }
+
         block = findValidBlock(param, output);
 
         key = param.slice(block.length + 1);
@@ -498,7 +491,7 @@ IniReaderCore.prototype.setParam = function setParam(prop, value) {
 
     var block, key, propArr;
 
-    if (isArray(prop)) {
+    if (util.isArray(prop)) {
         block = prop[0];
         key = prop[1];
     } else {
@@ -577,7 +570,7 @@ IniReaderCore.prototype.serialize = function serialize(le) {
             var keyValue = groupValues[key],
                 iterate;
 
-            if (multiValue && isArray(keyValue)) {
+            if (multiValue && util.isArray(keyValue)) {
                 iterate = keyValue;
             } else {
                 iterate = [keyValue];
@@ -659,7 +652,9 @@ IniReaderCore.prototype.interpolate = function (param) {
         }
 
         if (param) {
-            param = param.split('.');
+            if (!util.isArray(param)) {
+                param = param.split('.');
+            }
             block = param[0];
             key = param[1];
         }
diff --git a/lib/inireaderinheritdefault.js b/lib/inireaderinheritdefault.js
index 2fe15f5..b5c7218 100644
--- a/lib/inireaderinheritdefault.js
+++ b/lib/inireaderinheritdefault.js
@@ -1,5 +1,6 @@
 /*jslint node: true, sloppy: true, es5: true */
 var IniReaderCore = require('./inireadercore').IniReaderCore;
+var util = require('./util');
 /**
  * @property interPolationRexG
  * @final
@@ -109,7 +110,9 @@ IniReaderInheritDefault.prototype.getParam = function getParam(param) {
     if (this.values.hasOwnProperty('DEFAULT')) {
 
         if (param) {
-            param = param.split('.');
+            if (!util.isArray(param)) {
+                param = param.split('.');
+            }
 
             block = param[0];
             key = param[1];
@@ -119,3 +122,5 @@ IniReaderInheritDefault.prototype.getParam = function getParam(param) {
     return output;
 };
 exports.IniReaderInheritDefault = IniReaderInheritDefault;
+
+// vim: expandtab:sw=4:ts=4
diff --git a/lib/util.js b/lib/util.js
new file mode 100644
index 0000000..058daf4
--- /dev/null
+++ b/lib/util.js
@@ -0,0 +1,13 @@
+exports.isFunc = function isFunc(arg) {
+    return typeof arg === 'function';
+};
+
+exports.isArray = function isArray(arg) {
+    if (Array.isArray) {
+        return Array.isArray(arg);
+    } else {
+        return Object.prototype.toString.call(arg) === '[object Array]';
+    }
+};
+
+// vim: expandtab:sw=4:ts=4
diff --git a/tests/test.js b/tests/test.js
index b6e38c1..ab0f1ac 100644
--- a/tests/test.js
+++ b/tests/test.js
@@ -26,9 +26,11 @@
       assert.deepEqual(typeof obj[fnGet]('foo'), 'object', "key doesn't returned an object");
       assert.deepEqual(typeof obj[fnGet]('bar'), 'object', "key doesn't returned an object");
 
-      assert.deepEqual(obj[fnGet]('foo.lorem'), 'ipsum',
+      assert.equal(obj[fnGet]('foo.lorem'), 'ipsum',
         "lorem's key value in foo conf is not ipsum");
-      assert.deepEqual(obj[fnGet]().foo.lorem, 'ipsum',
+      assert.equal(obj[fnGet](['foo', 'lorem']), 'ipsum',
+        "lorem's key value in foo conf is not ipsum (array get)");
+      assert.equal(obj[fnGet]().foo.lorem, 'ipsum',
         "lorem's key value in foo conf is not ipsum when " +
           fnGet + ' is called without argument');
       assert.deepEqual(obj[fnGet]('foo').lorem, 'ipsum',
@@ -379,59 +381,63 @@
   testMultiValue = function () {
         var cfg = new inireader.IniReader({multiValue: true});
 
-		cfg.load('./ize-unix.ini');
-
-		assert.equal(cfg.param('baz.key').length, 3);
-		assert.equal(cfg.param('baz.key')[0], 'value1');
-		assert.equal(cfg.param('baz.key')[1], 'value2');
-		assert.equal(cfg.param('baz.key')[2], 'value3');
+    cfg.load('./ize-unix.ini');
 
-		cfg.write('./ize-unix-written.ini');
-		cfg.load('./ize-unix-written.ini');
-		assert.equal(cfg.param('baz.key')[0], 'value1');
-		assert.equal(cfg.param('baz.key')[1], 'value2');
-		assert.equal(cfg.param('baz.key')[2], 'value3');
-		fs.unlink('./ize-unix-written.ini');
+    assert.equal(cfg.param('baz.key').length, 3);
+    assert.equal(cfg.param('baz.key')[0], 'value1');
+    assert.equal(cfg.param('baz.key')[1], 'value2');
+    assert.equal(cfg.param('baz.key')[2], 'value3');
+
+    cfg.write('./ize-unix-written.ini');
+    cfg.load('./ize-unix-written.ini');
+    assert.equal(cfg.param('baz.key')[0], 'value1');
+    assert.equal(cfg.param('baz.key')[1], 'value2');
+    assert.equal(cfg.param('baz.key')[2], 'value3');
+    fs.unlink('./ize-unix-written.ini');
   };
 
   testHooks = function () {
-		var cfg = new inireader.IniReader({
-			hooks: {
-				write: {
-					keyValue: function (keyValue, group) {
-						if (group === 'allquoted') {
-							keyValue[1] = '"' + keyValue[1] + '"';
-						}
-
-						return keyValue;
-					}
-				}
-			}
-		});
-
-		cfg.load('./ize-unix.ini');
-
-		cfg.write('./ize-unix-written.ini');
-		cfg.load('./ize-unix-written.ini');
-        (function () {
-            var file = fs.readFileSync('./ize-unix-written.ini'),
-                quotedFound = false;
-            file.toString('utf8').split('\n').forEach(function (line) {
-                var value;
-                if (quotedFound && value) {
-                    value = line.split('=')[1];
-
-                    assert(value[0] === '"');
-                    assert(value[value.length - 1] === '"');
-                }
-                if (line === '[allquoted]') {
-                    quotedFound = true;
-                }
-            });
-
-            assert(quotedFound);
-        }())
-		fs.unlink('./ize-unix-written.ini');
+    var cfg = new inireader.IniReader({
+      hooks: {
+        write: {
+          keyValue: function (keyValue, group) {
+            if (group === 'allquoted') {
+              keyValue[1] = '"' + keyValue[1] + '"';
+            }
+
+            return keyValue;
+          }
+        }
+      }
+    });
+
+    cfg.load('./ize-unix.ini');
+
+        cfg.param(['allquoted', 'BanListURL'], 'http://foo.com/bar/baz');
+
+    cfg.write('./ize-unix-written.ini');
+    cfg.load('./ize-unix-written.ini');
+      (function () {
+          var file = fs.readFileSync('./ize-unix-written.ini'),
+              quotedFound = false;
+          file.toString('utf8').split('\n').forEach(function (line) {
+              var value;
+              if (quotedFound && value) {
+                  value = line.split('=')[1];
+
+                  assert(value[0] === '"');
+                  assert(value[1] !== '"');
+                  assert(value[value.length - 1] === '"');
+                  assert(value[value.length - 2] !== '"');
+              }
+              if (line === '[allquoted]') {
+                  quotedFound = true;
+              }
+          });
+
+          assert(quotedFound);
+      }());
+    fs.unlink('./ize-unix-written.ini');
   };
 
   // run tests
@@ -447,4 +453,4 @@
   testHooks();
 }());
 
-// vim: set expandtab:sw=2:ts=2:
+// vim: expandtab:sw=2:ts=2:
