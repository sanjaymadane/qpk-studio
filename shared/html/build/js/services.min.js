'use strict';

app.factory('BackgroundTask', ['$cookies', function ($cookies) {
        return {
            connect: function () {
                var access_token = $cookies.get('accessToken');
                
                if (access_token) {
                    return io.connect(config.SOCKET_URL, {
                        query: "token=" + access_token,
                        transports: ['websocket']
                    });
                } else {
                    return null;
                }
            }
        }
    }]);
'use strict';

app.factory('Base', ['$http', '$q', '$rootScope', '$cookies', '$location', function ($http, $q, $rootScope, $cookies, $location) {
    var checkStatus = function(response){
        var deferred = $q.defer();        
        if(response.data && response.data.status_code == 11000) {            
            $rootScope.$emit('restore_halted', response);
            deferred.reject("Error: request returned status ");
        } else if (response.data && response.data.status_code == 10007) {
            $cookies.remove('user');
            $cookies.remove('accessToken');
            $location.path('/login');
        } else {            
            deferred.resolve(response); 
        }        
        return deferred.promise;
    };
    return {
        get: function(url, params){
            return $http.get(config.API_URL + url).then(function(response){
                return checkStatus(response);
            });
        },
        post: function(url, data){
            return $http.post(config.API_URL + url, data);
        },
        put: function(url, data){
            return $http.put(config.API_URL + url, data);
        },
        delete: function(url, data){
            return $http.delete(config.API_URL + url, {
                data: data, headers: {
                    'Content-Type': "application/json; charset=utf-8"
                }
            });
        },
        cgiGet: function(url) {
            return $http.get(config.CGI_URL+url);
        }
    };

}]);
'use strict';

app.factory('CGI', ['Base', '$http', function (Base, $http) {
    return {
        getNasInfo: function(callback){
            var url = 'authLogin.cgi';            
            Base.cgiGet(url).then(function (response, err) {
                if(!err)
                    response = xml.xmlToJSON(response.data);
                callback(response, err);
            });            
        },
        getFoldersStructure: function (sid, filePath, callback) {
            var url = 'filemanager/utilRequest.cgi?func=get_tree&sid='+sid+'&is_iso=0&node='+filePath;
            Base.cgiGet(url).then(function (response, err) {
                callback(response, err);
            });
        },
        getFilesStructure: function (sid, filePath, type, callback) {
            var url = 'filemanager/utilRequest.cgi?func=get_list&sid='+sid+'&is_iso=0&list_mode=all&path='+filePath+'&dir=ASC&limit=20&sort=filename&start=0';
            if (type) {
                url = url + '&type='+ type;
            }

            Base.cgiGet(url).then(function (response, err) {
                callback(response, err);
            });
        },
        getFile: function (sid, filepath, filename, callback) {
            var url = 'filemanager/utilRequest.cgi/?sid='+sid+'&func=get_viewer&source_path='+filepath+'&source_file='+filename;

            Base.cgiGet(url).then(function (response, err) {
                callback(response, err);
            });
        },
        copyFile: function (sid, filepath, filename, callback) {
            var url = 'filemanager/utilRequest.cgi?func=copy&sid='+sid+'&source_file='+filename+'&source_total=1&source_path='+filepath+'&dest_path=/Qdownload&mode=1';

            Base.cgiGet(url).then(function (response, err) {
                callback(response, err);
            });
        },
        getAppInfo: function (app_name, callback) {
            Base.get('nas_app_info?app_name=' + app_name).then(function (response, err) {
                callback(response, err);
            });
        }
    };
}]);
'use strict';

app.factory('Contact', ['Base', '$http', 'Upload', function (Base, $http, Upload) {
    return {
        getContacts: function (params, callback) {
            Base.get('contacts?' + params).then(function (response, err) {
                callback(response, err);
            });
        },
        searchContacts: function (params, callback) {
            Base.get('contacts/search?' + params).then(function (response, err) {
                callback(response, err);
            });
        },
        updateContacts: function (id, params, callback) {
            Base.put('contacts/' + id, params).then(function (response, err) {
                callback(response, err);
            });
        },
        deleteContacts: function (params, callback) {
            Base.post('contacts/batch_delete', params).then(function (response, err) {
                callback(response, err);
            });
        },
        batchUpdateContacts: function (params, callback) {
            Base.post('contacts/batch_update', params).then(function (response, err) {
                callback(response, err);
            });
        },
        createContact: function (data, callback) {
            Base.post('contacts', data).then(function (response, err) {
                callback(response, err);
            });
        },
        getContact: function (contactId, callback) {
            Base.get('contacts/' + contactId).then(function (response, err) {
                callback(response, err);
            });
        },
        uploadContactPicture: function (contactId, dataUrl, name, callback) {
            var url = config.API_URL + 'contacts/picture/';
            if (contactId !== null) {
                url = url + '?contact_id=' + contactId;
            }
            
            Upload.upload({
                url: url,
                data: {profile_pic: Upload.dataUrltoBlob(dataUrl, name)}
            }).then(function (response, err) {
                callback(response, err);
            });
        },
        uploadFromNAS: function(contactId, data, type, callback){
            var url = 'nasupload';

            var postData = {file_details: data, type: type, contact_id: contactId};
            Base.post(url, postData).then(function (response, err) {
                callback(response, err);
            });
        },
        uploadAttachment: function (contactId, files, callback) {
            var url = config.API_URL + 'contacts/attachments/';
            if (contactId !== null) {
                url = url + '?contact_id=' + contactId;
            }
            Upload.upload({
                url: url,
                data: {attachments: files}
            }).then(function (response, err) {
                callback(response, err);
            });
        },
        deleteAttachment: function (attachment, callback) {
            Base.post('contacts/attachments/delete', attachment).then(function(response, err){
                callback(response, err)
            });
        },
        findDuplicates: function(params, callback) {
            Base.get('contacts/duplicate?' +params).then(function(response, err){
                callback(response, err);
            })
        },
        mergeDuplicates: function(data, callback) {            
            Base.post('contacts/merge', data).then(function(response,err){
                callback(response,err);
            });
        },
        mergeHistory: function(params, callback){
            Base.get('contacts/merge_history?'+params).then(function(response,err){
                callback(response,err);
            });
        },
        unmergeContacts: function(data, callback){            
            Base.post('contacts/merge_restore',data).then( function( response, err ){
                callback(response,err);
            });
        },
        fetchImportedContacts: function (url, callback) {
            Base.get(url).then(function (response, err) {
                callback(response, err);
            });
        },
        startImportingContacts: function (url, data, callback) {
            Base.post(url, data).then(function (response, err) {
                callback(response, err);
            });
        },
        setActiveInactiveStatus: function (url, data, callback) {
            Base.post(url, data).then(function (response, err) {
                callback(response, err);
            });
        },
        saveUserDefinedColumnMappingIntoDB: function (url, data, callback) {
            Base.post(url, data).then(function (response, err) {
                callback(response, err);
            });
        },
        generalGet: function (url, callback) {
            Base.get(url).then(function (response, err) {
                callback(response, err);
            });
        }
    };
}]);
'use strict';

app.factory('Export', ['Base', function (Base) {
    return {
        exportFile: function(params, callback) {
            Base.post('exports', params).then(function(response, err){
                callback(response, err);
            });
        }
    };
}]);
'use strict';

/* encode function start */
var ezEncodeChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

app.factory('SID', [function () {
    return {
        ezEncode: function(str){
            var out, i, len;
            var c1, c2, c3;

            len = str.length;
            i = 0;
            out = "";
            while(i < len)
            {
                c1 = str.charCodeAt(i++) & 0xff;
                if(i == len)
                {
                    out += ezEncodeChars.charAt(c1 >> 2);
                    out += ezEncodeChars.charAt((c1 & 0x3) << 4);
                    out += "==";
                    break;
                }
                c2 = str.charCodeAt(i++);
                if(i == len)
                {
                    out += ezEncodeChars.charAt(c1 >> 2);
                    out += ezEncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));
                    out += ezEncodeChars.charAt((c2 & 0xF) << 2);
                    out += "=";
                    break;
                }
                c3 = str.charCodeAt(i++);
                out += ezEncodeChars.charAt(c1 >> 2);
                out += ezEncodeChars.charAt(((c1 & 0x3)<< 4) | ((c2 & 0xF0) >> 4));
                out += ezEncodeChars.charAt(((c2 & 0xF) << 2) | ((c3 & 0xC0) >> 6));
                out += ezEncodeChars.charAt(c3 & 0x3F);
            }
            return out;
        },
    };
}])
'use strict';

app.factory('Group', ['Base', function (Base) {
    return {
    	getGroups: function(params, callback){
    		Base.get('groups?'+params).then(function(response, err){
    			callback(response, err);
    		});
    	},
        getGroupContacts: function(params, callback){
            Base.get('groups/'+params.group_id+'/contacts?'+params).then(function(response, err){
                callback(response, err);
            });
        },
        createGroup: function(data, callback){
            Base.post('groups', data).then(function(response, err){
                callback(response, err);
            });
        },
        getGroup: function(groupId, callback) {
            Base.get('groups/'+groupId).then(function (response, err){
                callback(response, err)
            });
        },
        updateGroup: function(groupId, params, callback){
            Base.put('groups/'+groupId, params).then(function(response, err){
                callback(response, err);
            });
        },
        deleteGroup: function(groupId, callback){
            Base.delete('groups/'+groupId).then(function(response, err){
                callback(response, err);
            });
        },
        getBatchGroupStatus: function(contactIds, callback) {
            Base.post('contacts/batch_group_status', contactIds).then(function(response, err){
                callback(response, err);
            });
        }
    };
}]);
(function(){
    'use strict';

    app.factory('Preview', ['Base', function (Base) {
        return {
            import: function(preview_id, callback) {
                Base.post('contacts/tmp/preview/' + preview_id + '/import', {}).then(function (response, err) {
                    callback(response, err);
                });
            },
            discard: function(preview_id, callback) {
                Base.delete('contacts/tmp/preview/' + preview_id, {}).then(function(response, err){
                    callback(response, err);
                });
            }
        };
    }]);
})();
'use strict';

app.factory('Private', ['Base', function (Base) {
    return {
        getSecurityQuestionSetByUser: function(callback){
            Base.get('high_security/question').then(function(response, err){
                callback(response, err);
            });
        },
        getSecurityQuestion: function(callback){
            Base.get('question_list').then(function(response, err){
                callback(response, err);
            });
        },
        setHighSecurityPassword: function(data, callback) {
            Base.post('high_security/set', data).then(function(response, err){
                callback(response, err);
            });
        },
        getSecondaryToken : function(data, callback) {
            Base.post('high_security/get_token', data).then(function(response, err){
                callback(response, err);
            });
        },
        resetHighSecurityPassword: function(data, callback) {
            Base.post('high_security/reset', data).then(function(response, err){
                callback(response, err);
            });
        },
    };
}]);
'use strict';

app.factory('SnapshotManagement', ['Base', function (Base) {
    return {
        takeSnapshot: function (data, callback) {        	
            Base.post('snapshot', data).then(function (response, err) {
                callback(response, err);
            });
        },
        getSnapshotList: function(params, callback){
        	Base.get('snapshot').then(function(response,err){
                callback(response,err);
            });
        },
        restoreSnapshot: function(params, callback){
        	Base.post('restore', params).then(function(response, err){
        		callback(response, err);
        	})
        },
        deleteSnapshot: function(snapshotId, callback){        	
        	Base.delete('snapshot/'+snapshotId).then(function(response,err){
        		callback(response, err);
        	})
        }

    };
}]);
'use strict';

app.factory('Sync', ['Base', 'Upload', function (Base, Upload) {
    return {
        googleAuth: function (callback) {
            Base.get('imports/google/contacts').then(function (response, err) {
                callback(response, err);
            });
        },

        getGoogleContacts: function (data, callback) {
            Base.post('imports/google/contacts', data).then(function (response, err) {
                callback(response, err);
            });
        },

        importFile: function (file, callback) {
            Upload.upload({
                url: config.API_URL + 'imports',
                data: { import: file }
            }).then(function (response, err) {
                callback(response, err);
            });
        },

        getHistory: function (callback) {
            Base.get('notifications?type=import').then(function (response, err) {
                callback(response, err);
            });
        },
        uploadFromNAS: function (data, type, callback) {
            var url = 'nasupload';

            var postData = { file_details: data, type: type };
            Base.post(url, postData).then(function (response, err) {
                callback(response, err);
            });
        },
        sendForImport: function (path, callback) {
            var postData = { import: path }
            Base.post('imports/file', postData).then(function (response, err) {
                callback(response, err);
            })
        },
        manualImport: function (id, isfullsync, callback) {
            var postData = {
                id: id,
                is_full_sync: isfullsync
            }
            Base.post('imports/google/syncnow', postData).then(function (response, err) {
                callback(response, err);
            })
        },
        syncTimeList: function (callback) {
            Base.get('imports/syncTimeList').then(function (response, err) {
                callback(response, err);
            });
        },
        syncTimeUpdate: function (id, syncTime, callback) {
            var postData = {
                id: id,
                trigger_break: syncTime
            }
            Base.post('imports/google/sync', postData).then(function (response, err) {
                callback(response, err);
            })
        },
        syncDeleteAccountGoogleSync: function (ids, callback) {
            var postData = {
                id: ids
            }
            Base.delete('imports/google/sync', postData).then(function (response, err) {
                callback(response, err);
            });
        },
        getSyncAccount: function (callback) {
            Base.get('imports/google/sync').then(function (response, err) {
                callback(response, err);
            });
        }
    };
}]);
'use strict';

app.factory('TaskNotification', ['Base', function (Base) {

    return {
        getNotifications: function (params, callback) {
            Base.get('notifications?'+params).then(function (response, err) {
                callback(response, err);
            });
        },
        updateNotifications: function (params, callback) {
            Base.post('notifications', params).then(function (response, err) {
                callback(response, err);
            });
        },
        downloadFile: function (params, callback) {
            Base.get('download?'+params).then(function (response, err) {
                callback(response, err);
            });
        }
    };
}]);
'use strict';

app.factory('UserManagement', ['Base', function (Base) {
    return {
        getUsers: function(callback){
            Base.get('users').then(function(response, err){
                callback(response, err);
            });
        },
        
        createUser: function(params, callback) {
            Base.post('users', params).then(function(response, err){
                callback(response, err);
            });
        },
        
        batchDeleteUsers: function(params, callback) {
            Base.post('users/batch_delete', params).then(function(response, err){
                callback(response, err);
            });
        },
        
        editUser: function(id, params, callback) {
            Base.put('users/me', params).then(function(response, err){
                callback(response, err);
            });
        },
        
        deleteUser: function(id, callback) {
            Base.delete('users/'+id).then(function(response, err){
                callback(response, err);
            });
        },

        resetPassword: function(params, callback) {
            Base.post('users/reset_password', params).then(function(response, err){
                callback(response, err);
            });
        }
    };
}]);
'use strict';

app.factory('User', ['Base', function (Base) {
    return {
        authenticate: function (params, callback) {
            Base.post('authenticate', params).then(function (response, err) {
                callback(response, err);
            });
        },
        validate: function (callback) {
            Base.get('authenticate/verify').then(function (response, err) {
                callback(response, err);
            });
        },
        getLoggedInUserDetails: function(callback) {
            Base.get('users/me').then(function (response, err) {
                callback(response, err);
            });
        },
        setTutorialDisplay: function(params, callback) {
            Base.put('users/me', params).then(function (response, err) {
                callback(response, err);
            });
        },
        logout: function(callback) {
            Base.post('authenticate/logout', {}).then(function (response, err) {
                callback(response, err);
            });
        },
        getNASDetails: function(callback) {
            Base.get('general/nas-details').then(function (response, err) {
                callback(response, err);
            });
        },
        getConfiguration: function (callback) {
            Base.get('users/config').then(function (response, err) {
                callback(response, err);
            });
        },
        setConfiguration: function(config, callback) {
            Base.post('users/config', config).then(function (response, err) {
                callback(response, err);
            });
        }
    };
}]);