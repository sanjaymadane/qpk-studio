'use strict';

app.controller('ContactCtrl', ['$scope', 'Contact', '$log', '$routeParams', 'Group', '$cookies', '$compile', '$location', 'ngDialog', 'Private', '$document', 'usSpinnerService', '$filter', 'toasty', '$rootScope', 'CGI',
    function ($scope, Contact, $log, $routeParams, Group, $cookies, $compile, $location, ngDialog, Private, $document, usSpinnerService, $filter, toasty, $rootScope, CGI) {
        $scope.duplicateTotalItems = 0;
        $scope.duplicateCurrentPage = 1;
        $scope.mergeTotalItems = 0;
        $scope.mergeCurrentPage = 1;
        $scope.duplicateItemsPerPage = duplicates.itemsPerPage;
        $scope.duplicateMaxSize = duplicates.maxSize;
        $scope.duplicatesNumPages = Math.ceil(200 / duplicates.itemsPerPage);
        $scope.boolShowAddContact = false;
        $scope.$parent.is_login_page = false;
        $scope.grid_heading = $filter('translate')('ALL_CONTACTS');
        $scope.userData = {
            is_active: true,
            sortby: 'fname'
        };
        $scope.paginationDetails = "";
        $scope.paginationCurrentPage = 1;
        $scope.paginationTotalPages = 0;
        $scope.paginationDisplayItem = "";

        $scope.paginationDetailsMerge = "";
        $scope.paginationCurrentPageMerge = 1;
        $scope.paginationTotalPagesMerge = 0;
        $scope.paginationDisplayItemMerge = "";

        $scope.pagination = {};
        $scope.pagination.limit = "50";
        $scope.pagination.limitmerge = "50";
        // Binding scope for grid usage
        $scope.boxShow = false;
        $scope.show_filter = false;
        $scope.show_sort = false;
        $scope.contact = Contact;
        $scope.location = $location;
        $scope.disable_batch_update = true;
        $scope.disable_merge_batch_update = true;
        $scope.totalContacts = 0;
        $scope.base_url = config.BASE_URL;
        $scope.pic_url = config.PIC_URL;
        $scope.mergeContact = [];
        $scope.unmergeContact = [];

        $scope.getUserConfiguration();

        $('.merge-data-content main').height($( window ).height()-200);
        $( window ).resize(function() {
          $('.merge-data-content main').height($( window ).height()-200);          
        });
        $scope.$watch('selectedRows', function (newValue, oldValue) {
            if (newValue && newValue.length > 0) {
                $scope.disable_batch_update = false;
                $scope.$parent.selectedContacts = newValue;
            } else {
                $scope.disable_batch_update = true;
                $scope.$parent.selectedContacts = [];
            }

            if (newValue && newValue.length > 1) {
                $scope.disable_merge_batch_update = false;
                $scope.$parent.selectedContacts = newValue;
            } else {
                $scope.disable_merge_batch_update = true;
                $scope.$parent.selectedContacts = newValue;
            }
        });
        $scope.viewContact = function(id){
            ngDialog.open({
                template: 'views/partials/view-contact.html',
                controller: 'ViewContactCtrl',
                resolve: {
                    contact_id: function() {
                        return id;
                    }
                },
                className: 'ngdialog-theme-default custom-width-550',
                closeByDocument: false
            });
        };
        $scope.closeGroupsDiv = function () {
            $scope.show_group = false;
            $scope.showCreateGroup = false;
            if (!$scope.$$phase)
                $scope.$apply();
        };
        $scope.selectedGroups = {
            checked: [],
            unchecked: []
        };
        $scope.is_trash = ($routeParams.type == 'trash') ? true : false;
        $scope.userData.group_id = ($routeParams.type == 'group') ? $routeParams.group_id : "";
        if ($routeParams.type == 'group') {
            Group.getGroup($routeParams.group_id, function (response, err) {
                $scope.userData.group_name = response.data.data.name;
            });
        }

        switch ($routeParams.type) {
            case 'frequently-used':
                $scope.resetMenu();
                $scope.grid_heading = $filter('translate')('FREQUENTLY_USED');
                $scope.menu.frequently_used = "selected";
                $scope.userData.sortby = 'usage';
                break;
            case 'favorite':
                $scope.resetMenu();
                $scope.grid_heading = $filter('translate')('FAVORITES');
                $scope.menu.favorite = "selected";
                $scope.userData.is_favorite = true;
                break;
            case 'private':
                $scope.resetMenu();
                $scope.grid_heading = $filter('translate')('PRIVATE');
                $scope.menu.private = "selected";
                $scope.userData.is_locked = true;
                break;
            case 'trash':
                $scope.resetMenu();
                $scope.grid_heading = $filter('translate')('TRASH');
                $scope.menu.trash = "selected";
                $scope.userData.is_active = false;
                break;
            case 'group':
                break;
            default:

        }
        $scope.sortGrid = function (field) {
            $scope.userData.sortby = field;
            $('#contact-grid').trigger('reloadGrid');
        };
        $scope.onSelectGroup = function ($event, groupId) {
            var checkbox = $event.target;
            if (groupId) {
                if (checkbox.checked) {
                    $scope.selectedGroups.checked.push({'group_id': groupId});
                    $scope.selectedGroups.unchecked = _.filter($scope.selectedGroups.unchecked, function (group) {
                        return !(group.group_id == groupId);
                    });
                } else {
                    $scope.selectedGroups.unchecked.push({'group_id': groupId});
                    $scope.selectedGroups.checked = _.filter($scope.selectedGroups.checked, function (group) {
                        return !(group.group_id == groupId);
                    });
                }
            }
            $scope.show_group = true;
        };
        $scope.onSelectRow = function (scope, action, params, id) {
            switch (action) {
                case 'sendQMail':
                    var selectedEmail = '';
                    selectedEmail = $('#email_' + id).text();
                    $scope.composeQMail(selectedEmail);
                    break;
                case 'edit':
                    scope.viewContact(id);
                    //scope.location.path('/contacts/edit/' + id);
                    if (!scope.$$phase)
                        scope.$apply();
                    break;
                case 'delete':
                case 'favorite':
                case 'private':
                    var self = this;
                    scope.contact.updateContacts(id, params, function (response) {
                        if (action == 'private' || $scope.userData.is_favorite == true) {
                            $('#contact-grid').trigger('reloadGrid');
                        } else {
                            if (response.data.status) {
                                if (params.is_favorite == true) {
                                    $('[data-id="favorite_' + id + '"]').removeClass('icon-favorite').addClass('icon-favorite-active');
                                    $('[data-id="favorite_' + id + '"]').removeClass('false').addClass('true');
                                    $('[data-id="favorite_' + id + '"]').attr('title', $filter('translate')('MAKE_UNFAVORITE'));
                                } else {
                                    $('[data-id="favorite_' + id + '"]').removeClass('true').addClass('false');
                                    $('[data-id="favorite_' + id + '"]').removeClass('icon-favorite-active').addClass('icon-favorite');
                                    $('[data-id="favorite_' + id + '"]').attr('title', $filter('translate')('MAKE_FAVORITE'));
                                }
                            }
                            $scope.load_groups();
                        }
                    });
                    break;
            }
        };

        $scope.setConfiguration = function(){
            if ($scope.userConfiguration != undefined) {
                $('#contact-grid').jqGrid('hideCol', ['phones', 'company_name', 'im', 'sources', 'events']);
                $('#contact-grid').jqGrid('showCol', $scope.userConfiguration.grid_column_selected);
            }
        };

        $scope.updatePaginationConfiguration = function (config) {
            $scope.userConfiguration.grid_config = config;
            $scope.$emit('configChanged', $scope.userConfiguration);
        };

        $scope.set_groups_menu = function () {
            if ($scope.userData.group_id) {
                setTimeout(function () {
                    $('.sub-menu').removeClass('selected');
                    $('#group_menu_' + $scope.userData.group_id).addClass('selected');
                }, 1);
            }
        };

        $scope.countryDialCodeWithCSSClass = config.COUNTRY_FLAGS;
        var gridUrl = ($routeParams.type == 'search') ? 'contacts/search' : 'contacts';
        $scope.config = {
            datatype: 'json',
            ajaxGridOptions: {contentType: "application/json", cache: false},
            url: config.API_URL + gridUrl,
            loadBeforeSend: function (jqXHR) {
                jqXHR.setRequestHeader('Authorization', 'bearer ' + $cookies.get('accessToken'));
                jqXHR.setRequestHeader('Highsecurity', $cookies.get('secondaryToken'));
            },
            userdata: $scope.userData,
            id: '_id',
            colNames: ['id', '', '', $filter('translate')('NAME'), $filter('translate')('EMAIL'), $filter('translate')('PHONE'), $filter('translate')('COMPANY'), $filter('translate')('IM'), $filter('translate')('SOURCE'), $filter('translate')('EVENTS'), $filter('translate')('DELETED_ON')],
            colModel: [
                {name: '_id', index: '_id', hidden: true, frozen: true, },
                {
                    name: 'actions',
                    index: 'actions',
                    resizable: false,
                    frozen: true,
                    'width': 30,
                    align: 'center',
                    formatter: function (cellvalue, options, rowObject) {
                        var html = "";
                        if (rowObject.is_favorite)
                            html += '<span data-id="favorite_' + rowObject._id + '" title="' + $filter('translate')('MAKE_UNFAVORITE') + '" class="icon-favorite-active action-toolbar favorite ' + rowObject.is_favorite + '"></span>';
                        else
                            html += '<span data-id="favorite_' + rowObject._id + '" title="' + $filter('translate')('MAKE_FAVORITE') + '" class="icon-favorite action-toolbar favorite ' + rowObject.is_favorite + '"></span>';
                        $compile(angular.element(html))($scope);
                        return html;
                    }
                },
                {
                    name: 'profile_pic',
                    index: 'profile_pic',
                    resizable: false,
                    frozen: true,
                    align: 'center',
                    width: 50,
                    formatter: function (cellvalue, options, rowObject) {
                        var profile_pic_url = config.PIC_URL + cellvalue + '?v=' + Math.random();
                        if (cellvalue)
                            return '<img class="profile-pic edit" src="' + profile_pic_url + '"/>';
                        else
                            return "";
                    }
                },
                {
                    name: 'fname',
                    index: 'fname',
                    sortable: false,
                    resizable: false,
                    frozen: true,
                    width: 200,
                    formatter: function (cellvalue, options, rowObject) {
                        var contact_name = '';
                        var fname = (rowObject.fname != undefined) ? rowObject.fname : '';
                        var mname = (rowObject.mname != undefined) ? rowObject.mname : '';
                        var lname = (rowObject.lname != undefined) ? rowObject.lname : '';
                        var nickname = (rowObject.nickname != undefined) ? rowObject.nickname : '';

                        if (fname != '' || lname != '') {
                            if ($scope.userData.sortby == undefined || $scope.userData.sortby == 'fname') {
                                contact_name = fname + ' ' + lname;
                            } else if ($scope.userData.sortby == 'lname') {
                                contact_name = lname + ' ' + fname;
                            } else if ($scope.userData.sortby == 'usage') {
                                contact_name = fname + ' ' + lname;
                            }
                        } else if (mname != '') {
                            contact_name = mname;
                        } else if (nickname != '') {
                            contact_name = nickname;
                        } else {
                            contact_name = '[unnamed]';
                        }

                        return '<div class="edit contact-grid-column-padding">' + _.escape(contact_name) + '<div>';
                    }
                },
                {
                    name: 'emails', index: 'emails', frozen: true, title: false, resizable: false, sortable: false, width: 250,
                    formatter: function (cellvalue, options, rowObject) {
                        if (cellvalue && cellvalue.length > 1) {
                            var cellstring = '';
                            var primary_set = false;
                            cellvalue.forEach(function (q) {
                                if (q.is_primary) {
                                    primary_set = true;
                                }
                            });
                            cellvalue.forEach(function (q) {
                                var is_primary = (q.is_primary != undefined) ? q.is_primary : false;
                                var email = (q.value != undefined) ? q.value : '';
                                var emailType = (q.label != undefined) ? q.label : '';
                                if (primary_set && is_primary && cellstring == '') {
                                    cellstring += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + email + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                                } else if (!primary_set && !is_primary && cellstring == '') {
                                    cellstring += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + email + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                                }
                            });
                            cellvalue.forEach(function (q) {
                                var is_primary = (q.is_primary != undefined) ? q.is_primary : false;
                                var email = (q.value != undefined) ? q.value : '';
                                var emailType = (q.label != undefined) ? q.label : '';
                                var user = ($cookies.get('user')) ? JSON.parse($cookies.get('user')) : {};
                                cellstring += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" onclick="sendQMail(`' + email + '`, `' + user.sid + '`);return false;">' + '<span id="email_' + rowObject._id + '" class="sendQMail">' + email + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(emailType) + '</span>' + '</a></li>';
                            });
                            cellstring += '</ul></div>';
                            return cellstring;
                        } else {
                            var email = (cellvalue.length > 0 && cellvalue[0].value != undefined) ? cellvalue[0].value : "";
                            return '<div id="email_' + rowObject._id + '" class="sendQMail contact-grid-column-padding">' + email + '</div>';
                        }
                    }
                },
                {
                    name: 'phones', index: 'phones', title: false, resizable: false, sortable: false, width: 250, formatter: function (cellvalue, options, rowObject) {

                        $scope.countryFlagCss = "";
                        function getCSSClassOnCountryCode(phones) {
                            $scope.countryFlagCss = $scope.countryDialCodeWithCSSClass[phones];
                            if (!$scope.countryFlagCss)
                                $scope.countryFlagCss = "flag";
                        }

                        if (cellvalue && cellvalue.length > 1) {
                            var cellstring = '';
                            var primary_set = false;
                            cellvalue.forEach(function (q) {
                                if (q.is_primary) {
                                    primary_set = true;
                                }
                            });

                            cellvalue.forEach(function (q) {
                                var is_primary = (q.is_primary != undefined) ? q.is_primary : false;
                                var phones = (q.value != undefined) ? q.value : '';
                                var phoneType = (q.label != undefined) ? q.label : '';
                                if (primary_set && is_primary && cellstring == '') {
                                    getCSSClassOnCountryCode(q.country_code);
                                    cellstring += '<div class="dropdown"><button id="phone_' + rowObject._id + '" class="btn btn-default dropdown-toggle contact-grid-phone-button"  data-toggle="dropdown">' + '<span class="' + $scope.countryFlagCss + '" />' + " " + phones + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                                } else if (!primary_set && !is_primary && cellstring == '') {
                                    getCSSClassOnCountryCode(q.country_code);
                                    cellstring += '<div class="dropdown"><button id="phone_' + rowObject._id + '" class="btn btn-default dropdown-toggle contact-grid-phone-button"  data-toggle="dropdown">' + '<span class="' + $scope.countryFlagCss + '" />' + " " + phones + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                                }
                            });
                            cellvalue.forEach(function (q) {
                                var is_primary = (q.is_primary != undefined) ? q.is_primary : false;
                                var phones = (q.value != undefined) ? q.value : '';
                                var phoneType = (q.label != undefined) ? q.label : '';
                                getCSSClassOnCountryCode(q.country_code);
                                cellstring += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)">' + '<span class="' + $scope.countryFlagCss + '" />' + " " + phones + '<span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(phoneType) + '</span>' + '</a></li>';

                            });
                            cellstring += '</ul></div>';
                            return cellstring;
                        } else {
                            var phone = "";

                            phone = (cellvalue.length > 0 && cellvalue[0].value != undefined) ? cellvalue[0].value : "";
                            if (phone != "") {
                                getCSSClassOnCountryCode(cellvalue[0].country_code);
                                phone = '<span class="contact-grid-column-padding" /><span class="' + $scope.countryFlagCss + '" />' + " " + phone;
                            }

                            return phone;
                        }
                    }
                },
                {
                    name: 'company_name', resizable: false, sortable: false, index: 'company_name', width: 250,
                    formatter: function (cellvalue, options, rowObject) {
                        if (cellvalue) {
                            return '<div class="contact-grid-column-padding">' + _.escape(cellvalue) + '</div>';
                        } else
                            return "";
                    }
                },
                {
                    name: 'im', sortable: false, resizable: false, index: 'im', width: 250, formatter: function (cellvalue, options, rowObject) {
                        var cellstring = "";
                        if (cellvalue && cellvalue.length > 1) {
                            cellstring += '<div class="dropdown"><button id="im_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(cellvalue[0].value) + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(cellvalue[0].label) + '</span>' + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            cellvalue.forEach(function (q) {
                                var im = (q.value != undefined) ? q.value : '';
                                var imType = (q.label != undefined) ? q.label : '';
                                if(im)
                                    cellstring += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="im_' + rowObject._id + '">' + im + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(imType) + '</span>' + '</a></li>';

                            });
                            cellstring += '</ul></div>';
                            return cellstring;
                        } else {
                            cellstring = (cellvalue.length > 0 && cellvalue[0].value != "") ? '<div class="dropdown"><div class="contact-grid-column-padding">' + cellvalue[0].value + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(cellvalue[0].label) + '</span>' + '</div></div>' : "";
                        }
                        return cellstring;
                    }
                },
                {
                    name: 'sources', resizable: false, sortable: false, index: 'sources', width: 250, formatter: function (cellvalue, options, rowObject) {
                        if (cellvalue && cellvalue.length > 0) {
                            var source = (cellvalue[0].value != undefined) ? cellvalue[0].value : '';
                            return '<span class="contact-grid-column-padding" />' + source;
                        } else
                            return "";
                    }
                },
                {
                    name: 'events', index: 'events', resizable: false, sortable: false, width: 250, formatter: function (cellvalue, options, rowObject) {
                        var eventsHTML = "";
                        var events = [];

                        if (cellvalue.length > 1) {
                            _.filter(cellvalue, function(event) {
                                if (event.value) {
                                    var label = event.label;
                                    var value = event.value;
                                    var obj = {label: label, value: value};
                                    events.push(obj);
                                }
                            });
                            if (events.length > 1) {
                                var default_d = new Date(events[0].value);
                                var default_date = default_d.getDate();
                                var default_month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][default_d.getMonth()];
                                var default_year = default_d.getFullYear();
                                eventsHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + [default_date, default_month, default_year].join('-') + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(events[0].label) + '</span>' + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                                events.forEach(function (q) {
                                    var d = new Date(q.value);
                                    var date = d.getDate();
                                    var month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][d.getMonth()];
                                    var year = d.getFullYear();
                                    eventsHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + [date, month, year].join('-') + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                                });
                                eventsHTML += '</ul></div>';
                            } else {
                                var d = new Date(cellvalue[0].value);
                                var date = d.getDate();
                                var month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][d.getMonth()];
                                var year = d.getFullYear();
                                eventsHTML = (cellvalue.length>0 && cellvalue[0].value) ? '<div class="dropdown"><div class="contact-grid-column-padding">' + [date, month, year].join('-') + ' <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(cellvalue[0].label) + '</span>' + '</div></div>' : "";
                            }
                        }
                        return eventsHTML;
                    }
                },
                {
                    name: 'updated_on', index: 'updated_on', resizable: false, sortable: false, width: 250, formatter: function (cellvalue, options, rowObject) {
                        var d = new Date(cellvalue);
                        var date = d.getDate();
                        var month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][d.getMonth()];
                        var year = d.getFullYear();
                        return [date, month, year].join('-');
                    }
                }
            ],
            scope: $scope,
            serializeGridData: function (postData) {
                var userData = $(this).getGridParam('userdata');
                if (typeof userData.is_active !== 'undefined')
                    postData.is_active = userData.is_active;
                if (typeof userData.is_favorite !== 'undefined')
                    postData.is_favorite = userData.is_favorite;
                if (typeof userData.is_locked !== 'undefined')
                    postData.is_locked = userData.is_locked;
                if (typeof $scope.userData.sortby !== 'undefined')
                    postData.sortby = $scope.userData.sortby;
                postData.group_id = userData.group_id;
                postData.limit = postData.rows;
                postData.page = postData.page - 1;
                postData.s = '';
                if ($routeParams.type == 'search') {
                    $('.group-info').hide();
                    $scope.resetMenu();
                    postData.is_private = false;
                    if ($scope.searchCriteriaModel.length > 0) {
                        postData.search_in_fields = '';
                        $scope.searchCriteriaModel.forEach(function (field) {
                            if (field.id == 'name') {
                                postData.search_in_fields = postData.search_in_fields + 'fname,mname,lname,'
                            } else {
                                postData.search_in_fields = postData.search_in_fields + field.id + ',';
                            }
                        });
                        postData.s = decodeURIComponent($routeParams.group_id);
                        postData.search_in_fields = postData.search_in_fields.slice(0, -1);
                    }
                }

                return postData;
            },
            multiselect: true,
            rowNum: ($scope.userConfiguration && $scope.userConfiguration.grid_config) ? $scope.userConfiguration.grid_config.pagination : 100,
            rowList: [50, 100, 200, 500],
            pageable: true,
            jsonReader: {
                root: 'data.data',
                rows: function (obj) {
                    return obj.data.data;
                },
                records: function (obj) {
                    if (obj.data.total < 1) {
                        if ($routeParams.type == undefined && $scope.searchString == '') {
                            $location.path('/default');
                        } else {
                            $(".grid-container").hide();
                            if ($routeParams.type === 'frequently-used') {
                                $(".no-frequently-used-contacts").show();
                                $scope.resetMenu();
                                $scope.menu.frequently_used = "selected";
                            }

                            if ($routeParams.type === 'favorite') {
                                $(".no-favorites").show();
                                $scope.resetMenu();
                                $scope.menu.favorite = "selected";
                            }

                            if ($routeParams.type === 'private') {
                                $(".no-privates").show();
                                $scope.resetMenu();
                                $scope.menu.private = "selected";
                            }

                            if ($routeParams.type === 'group') {
                                $(".empty-group").show();
                                $scope.resetMenu();
                                $scope.menu.group = "selected";
                            }

                            if ($routeParams.type === 'trash') {
                                $(".empty-trash").show();
                                $scope.resetMenu();
                                $scope.menu.trash = "selected";
                            }

                            if ($routeParams.type === 'search') {
                                $(".no-searched-contacts").show();
                            }

                            if ($routeParams.type === undefined) {
                                $location.path('/sync/true');
                            }
                        }
                    } else {
                        $(".grid-container").show();
                    }
                    $scope.totalContacts = obj.data.total;
                    return obj.data.total;
                },
                page: function (obj) {
                    return obj.data.page + 1;
                },
                total: function (obj) {
                    return parseInt(obj.data.pages);
                }
            },
            pager: '#pagercontact-grid'
        };
        $scope.hideShowGridColumn = function (index) {
            if ($('#column_' + index).is(":checked")) {
                $('#contact-grid').jqGrid('showCol', [index]);

                $scope.userConfiguration.grid_column_selected.push(index);
            } else {
                $('#contact-grid').jqGrid('hideCol', [index]);
                _.filter($scope.userConfiguration.grid_column_selected, function (col, i) {
                    if (col == index) {
                        $scope.userConfiguration.grid_column_selected.splice(i, 1);
                    }
                });
            }
            $scope.$emit('configChanged', $scope.userConfiguration);
            $scope.show_filter = true;
        };

        $scope.editContact = function (contact) {
            $location.path('/contacts/edit' + contact._id);
        };
        $scope.batchDelete = function () {
            var params = {
                "contact_ids": selectedRows.contactIds,
                "update_data": {
                    "is_active": false
                }
            };
            Contact.batchUpdateContacts(params, function (response, err) {
                if (response.data.status) {
                    $scope.loadContacts();
                }
            });
        };
        $scope.batchMergeDuplicate = function () {
            if ($scope.selectedRows.length > 1) {
                Contact.mergeDuplicates({ids: [$scope.selectedRows]}, function (response, err) {
                    if (response.data.status) {
                        $scope.load_groups();
                        $('#contact-grid').trigger('reloadGrid');
                    } else {
                        toasty.error({
                            msg: $filter('translate')('ERROR_MERGE')
                        });
                    }
                })
            } else {
                toasty.error({
                    msg: $filter('translate')('CONTACT_MERGE_VALIDATION')
                });
            }
        };
        $scope.batchFavorite = function () {
            var params = {
                "contact_ids": selectedRows.contactIds,
                "update_data": {
                    "is_favorite": true
                }
            };
            Contact.batchUpdateContacts(params, function (response, err) {
                if (response.data.status) {
                    $scope.loadContacts();
                }
            });
        };
        $scope.batchPrivate = function () {
            var params = {
                "contact_ids": selectedRows.contactIds,
                "update_data": {
                    "is_locked": true
                }
            };
            Contact.batchUpdateContacts(params, function (response, err) {
                if (response.data.status) {
                    $scope.loadContacts();
                }
            });
        };
        $scope.doFavorite = function (data) {
            var favTag = $("#favorite_" + data);
            var favResultedFlag = (favTag.attr("data-is-starred") == "true") ? false : true;
            var params = {"is_favorite": favResultedFlag};
            Contact.updateContacts(data, params, function (response, err) {
                if (response.data.status) {
                    if ($scope.favoriteReload) {
                        $scope.loadContacts();
                    } else {
                        if (favTag.attr("data-is-starred") == "true") {
                            favTag.removeClass('starred');
                        } else {
                            favTag.addClass('starred');
                        }
                        favTag.attr("data-is-starred", favResultedFlag);
                    }
                }
            });
        };
        $scope.sendQMail = function (element, previous) {
            $scope.composeQMail(element.val());
            element.val(previous);
        };
        $scope.doPrivate = function (data) {
            Private.getSecurityQuestionSetByUser(function (response, err) {
                if (response.data.data && response.data.data.data && response.data.data.data != '') {
                    var params = {"is_locked": true};
                    Contact.updateContacts(data, params, function (response, err) {
                        if (response.data.status) {
                            if ($scope.privateReload) {
                                $scope.loadContacts();
                            }
                        }
                    });
                } else {
                    ngDialog.open({
                        template: 'views/high-security-question.html',
                        controller: 'MainCtrl',
                        closeByDocument: false
                    });
                }
            });
        };
        $scope.permanentDelete = function (all_contacts) {
            if (!all_contacts) {
                if ($scope.selectedRows.length > 0) {
                    var perm_delete_message = $scope.selectedRows.length > 1 ? $filter('translate')('PERMANENT_DELETE_CONTACTS_WARNING') : $filter('translate')('PERMANENT_DELETE_CONTACT_WARNING');
                    ngDialog.openConfirm({
                        template:
                        '<p>' + perm_delete_message + '</p>' +
                        '<footer><div class="confirm-buttons">' +
                        '<button type="button" class="mycontacts-btn" ng-click="confirm(1)">' + $filter('translate')('CONFIRM') + '</button>&nbsp;&nbsp;&nbsp;' +
                        '<button type="button" class="cancel" ng-click="closeThisDialog(0)">' + $filter('translate')('CANCEL') +
                        '</button></div></footer>',
                        plain: true,
                        className: 'ngdialog-theme-default'
                    }).then(function (value) {
                        var params = {
                            contact_ids: $scope.selectedRows
                        };
                        Contact.deleteContacts(params, function (response, err) {
                            $('#contact-grid').trigger('reloadGrid');
                            $scope.load_groups();
                        });
                    });
                }
            } else {
                var perm_delete_all_message = $filter('translate')('PERMANENT_DELETE_ALL_CONTACTS_WARNING');
                ngDialog.openConfirm({
                    template:
                    '<p>' + perm_delete_all_message + '</p>' +
                    '<footer><div class="confirm-buttons">' +
                    '<button type="button" class="mycontacts-btn" ng-click="confirm(1)">' + $filter('translate')('CONFIRM') + '</button>&nbsp;&nbsp;&nbsp;' +
                    '<button type="button" class="cancel" ng-click="closeThisDialog(0)">' + $filter('translate')('CANCEL') +
                    '</button></div></footer>',
                    plain: true,
                    className: 'ngdialog-theme-default'
                }).then(function (value) {
                    var params = {
                        trash_only: true,
                        remove_all: true
                    };
                    Contact.deleteContacts(params, function (response, err) {
                        $('#contact-grid').trigger('reloadGrid');
                        $scope.load_groups();
                    });
                });
            }
        };
        $scope.batchProcess = function (action) {
            if ($scope.selectedRows.length > 0) {
                var params = {
                    "contact_ids": $scope.selectedRows,
                    "update_data": {}
                };
                switch (action) {
                    case 'sendQMail':
                        var selectedEmails = '';
                        params.contact_ids.forEach(function (value) {
                            if ($("#email_" + value).text()) {
                                if (selectedEmails != '') {
                                    selectedEmails = selectedEmails + ', ';
                                }
                                selectedEmails = selectedEmails + $("#email_" + value).text();
                            }
                        });
                        if (selectedEmails) {
                            $scope.composeQMail(selectedEmails);
                        } else {
                            toasty.error({
                                msg: $filter('translate')('EMAIL_NOT_AVAILABLE')
                            });
                        }
                        break;
                    case 'delete':
                        params.update_data.is_active = false;
                        break;
                    case 'favorite':
                        params.update_data.is_favorite = true;
                        break;
                    case 'unfavorite':
                        params.update_data.is_favorite = false;
                        break;
                    case 'private':
                        if ($routeParams.type == 'private') {
                            params.update_data.is_locked = false;
                        } else {
                            params.update_data.is_locked = true;
                        }
                        break;
                    case 'restore':
                        params.update_data.is_active = true;
                        break;
                    case 'addToGroup':
                        params.update_data.groups = $scope.selectedGroups;
                        break;
                }

                if (action != 'sendQMail') {
                    if (action == 'delete') {
                        var warning_message = '';
                        if($scope.selectedRows.length > 1){
                            if ($routeParams.type == 'private') {
                                warning_message = $filter('translate')('PRIVATE_CONTACTS_DELETE_WARNING');
                            } else {
                                warning_message = $filter('translate')('DELETE_CONTACTS_WARNING');
                            }
                        } else {
                            if ($routeParams.type == 'private') {
                                warning_message = $filter('translate')('PRIVATE_CONTACT_DELETE_WARNING');
                            } else {
                                warning_message = $filter('translate')('DELETE_CONTACT_WARNING');
                            }
                        }
                        ngDialog.openConfirm({
                            template:
                                    '<p>' + warning_message + '</p>' +
                                    '<footer><div class="confirm-buttons">' +
                                    '<button type="button" class="mycontacts-btn" ng-click="confirm(1)">' + $filter('translate')('CONFIRM') + '</button>&nbsp;&nbsp;&nbsp;' +
                                    '<button type="button" class="cancel" ng-click="closeThisDialog(0)">' + $filter('translate')('CANCEL') +
                                    '</button></div></footer>',
                            plain: true,
                            className: 'ngdialog-theme-default'
                        }).then(function (value) {
                            $scope.batchUpdateContacts(params, action);
                        });
                    } else if (action == 'private') {
                        Private.getSecurityQuestionSetByUser(function (response, err) {
                            if (response.data.data && response.data.data.data && response.data.data.data != '') {
                                $scope.batchUpdateContacts(params, action);
                            } else {
                                var dialog = ngDialog.open({
                                    template: 'views/high-security-question.html',
                                    controller: 'MainCtrl',
                                    className: 'ngdialog-theme-default custom-width-550',
                                    closeByDocument: false
                                });

                                dialog.closePromise.then(function (data) {
                                    if (data.value == 'success') {
                                        $scope.batchUpdateContacts(params, action);
                                    }
                                });
                            }
                        });
                    } else {
                        $scope.batchUpdateContacts(params, action);
                    }
                }
            }
        };
        $scope.batchUpdateContacts = function (params, action) {
            Contact.batchUpdateContacts(params, function (response, err) {
                if (action == 'private' || $scope.userData.is_favorite == true || action == 'delete' || action == 'restore') {
                    $('#contact-grid').trigger('reloadGrid');
                } else if ($routeParams.type == 'group' && action == 'addToGroup') {
                    $('#contact-grid').trigger('reloadGrid');
                } else if ($routeParams.type == 'group' && action == 'addToGroup') {
                    $('#contact-grid').trigger('reloadGrid');
                } else {
                    if (response.data.status) {
                        params.contact_ids.forEach(function (contact_id) {
                            if (params.update_data.is_favorite == true) {
                                $('[data-id="favorite_' + contact_id + '"]').removeClass('false').addClass('true');
                                $('[data-id="favorite_' + contact_id + '"]').removeClass('icon-favorite').addClass('icon-favorite-active');
                            } else if (params.update_data.is_favorite == false) {
                                $('[data-id="favorite_' + contact_id + '"]').removeClass('true').addClass('false');
                                $('[data-id="favorite_' + contact_id + '"]').removeClass('icon-favorite-active').addClass('icon-favorite');
                            }
                        });
                    }
                }
                $scope.load_groups();
            });
        };
        $scope.getGroupStatus = function () {
            Group.getBatchGroupStatus({contact_ids: $scope.selectedRows}, function (response, err) {
                $scope.show_group = true;
                if (response.data.data[0].status == 'all') {
                    response.data.data.forEach(function (group) {
                        $scope.selectedGroups.checked.push({'group_id': group.group_id});
                        $('#' + group.group_id).prop('checked', true);
                    });
                } else {
                    response.data.data.forEach(function (group) {
                        $scope.selectedGroups.checked.push({'group_id': group.group_id});
                        $('#' + group.group_id).prop('checked', false);
                    });
                }
            });
        };
        $scope.firstPage = function () {
            if ($scope.paginationCurrentPage != 1) {
                $scope.paginationCurrentPage = 1;
                $scope.findDuplicates($scope.paginationCurrentPage);
            }
        };
        $scope.prevPage = function () {
            if ($scope.paginationCurrentPage > 1) {
                $scope.paginationCurrentPage = $scope.paginationCurrentPage - 1;
                $scope.findDuplicates($scope.paginationCurrentPage);
            }
        };
        $scope.nextPage = function () {
            if ($scope.paginationCurrentPage < $scope.paginationTotalPages) {
                $scope.paginationCurrentPage = $scope.paginationCurrentPage + 1;
                $scope.findDuplicates($scope.paginationCurrentPage);
            }
        };
        $scope.lastPage = function () {
            if ($scope.paginationCurrentPage != $scope.paginationTotalPages) {
                $scope.paginationCurrentPage = $scope.paginationTotalPages;
                $scope.findDuplicates($scope.paginationTotalPages);
            }
        };
        $scope.$watch('pagination.limit', function (value) {
            $scope.findDuplicates(1);
        });
        $scope.findDuplicates = function (pageNo) {
            $scope.$parent.boolShowAddContact = true;
            $scope.duplicate_contacts = [];
            $scope.showButton = 'merge';
            //var params = 'limit=' + $scope.duplicateItemsPerPage;
            var params = 'limit=' + $scope.pagination.limit;
            if (typeof pageNo == 'undefined') {
                pageNo = 0;
            }
            pageNo = ((pageNo > 0) ? pageNo - 1 : pageNo);
            //params += '&page=' + ((pageNo > 0) ? pageNo - 1 : pageNo);
            params += '&page=' + pageNo;
           
            $scope.loading = true;
            Contact.findDuplicates(params, function (response, err) {
                $scope.loading = false;
                if (true == response.data.status) {
                    $scope.duplicateCurrentPage = pageNo;
                    $scope.duplicateTotalItems = response.data.data.total;
                    $scope.paginationDetails = pageNo +1 + "/" + response.data.data.pages;
                    $scope.paginationTotalPages = response.data.data.pages;
                    var tocount = (pageNo + 1) * $scope.pagination.limit;
                    var fromcount = pageNo == 0 ? 1 : tocount - $scope.pagination.limit;
                    tocount = tocount > response.data.data.total ? response.data.data.total : tocount;
                    
                    $scope.paginationDisplayItem = fromcount + " - " + tocount;
                    if ($scope.duplicateTotalItems > 0) {
                        angular.forEach(response.data.data.data, function (contact, index) {
                            $scope.mergeContact[index] = {};
                            var latestDate = '';
                            angular.forEach(contact.contacts, function (dup_contact) {
                                if (latestDate && latestDate.length > 0) {
                                    if (dup_contact.updated_on > latestDate) {
                                        $scope.mergeContact[index]['profile_pic'] = dup_contact.profile_pic;
                                        latestDate = dup_contact.updated_on;
                                    }
                                } else {
                                    $scope.mergeContact[index]['profile_pic'] = dup_contact.profile_pic;
                                    latestDate = dup_contact.updated_on;
                                }

                                $scope.mergeContact[index][dup_contact._id] = true;
                            })
                        });
                        $scope.duplicate_contacts = response.data.data.data;
                    } else {

                        $scope.duplicate_contacts = [];
                    }

                }

            });
        };
        $scope.mergeDuplicate = function ($index) {
            var duplicateContact = [];
            if (typeof $index !== 'undefined') {
                if ($scope.mergeContact[$index]) {
                    angular.forEach($scope.mergeContact[$index], function (value, key) {
                        if (true == value) {
                            duplicateContact.push(key);
                        }
                    });
                    if (duplicateContact.length > 1) {
                        Contact.mergeDuplicates({ids: [duplicateContact]}, function (response, err) {
                            if (response.data.status) {
                                //remove element from the scope 
                                $scope.load_groups();
                                $scope.mergeContact.splice($index, 1);
                                $scope.duplicate_contacts.splice($index, 1);
                            } else {
                                toasty.error({
                                    msg: $filter('translate')('ERROR_MERGE')
                                });
                            }
                        })
                    } else {
                        toasty.error({
                            msg: $filter('translate')('CONTACT_MERGE_VALIDATION')
                        });
                    }
                } else {
                    toasty.error({
                        msg: $filter('translate')('NO_CONTACT_MERGE')
                    });
                }
            } else {
                if ($scope.duplicate_contacts.length > 0) {
                    angular.forEach($scope.duplicate_contacts, function (contact) {
                        duplicateContact.push(contact['ids']);
                    });
                    if (duplicateContact.length > 0) {
                        Contact.mergeDuplicates({ids: duplicateContact}, function (response, err) {
                            if (response.data.status) {
                                $scope.load_groups();
                                //remove element from the scope
                                $scope.duplicate_contacts = [];
                                //reload tab data
                                $scope.findDuplicates();
                            } else {
                                toasty.error({
                                    msg: $filter('translate')('ERROR_MERGE')
                                });
                            }
                        })
                    } else {
                        toasty.error({
                            msg: filter('translate')('CONTACT_MERGE_VALIDATION')
                        });
                    }
                } else {
                    toasty.error({
                        msg: $filter('translate')('NO_CONTACT_MERGE')
                    });
                }
            }
        };
        $scope.firstPageMerge = function () {
            if ($scope.paginationCurrentPageMerge != 1) {
                $scope.paginationCurrentPageMerge = 1;
                $scope.getMergeHistory($scope.paginationCurrentPageMerge);
            }
        };
        $scope.prevPageMerge = function () {
            if ($scope.paginationCurrentPageMerge > 1) {
                $scope.paginationCurrentPageMerge = $scope.paginationCurrentPageMerge - 1;
                $scope.getMergeHistory($scope.paginationCurrentPageMerge);
            }
        };
        $scope.nextPageMerge = function () {
            if ($scope.paginationCurrentPageMerge < $scope.paginationTotalPagesMerge) {
                $scope.paginationCurrentPageMerge = $scope.paginationCurrentPageMerge + 1;
                $scope.getMergeHistory($scope.paginationCurrentPageMerge);
            }
        };
        $scope.lastPageMerge = function () {
            if ($scope.paginationCurrentPageMerge != $scope.paginationTotalPagesMerge) {
                $scope.paginationCurrentPageMerge = $scope.paginationTotalPagesMerge;
                $scope.getMergeHistory($scope.paginationTotalPagesMerge);
            }
        };
        $scope.$watch('pagination.limitmerge', function (value) {
            $scope.getMergeHistory(1);
        });
        $scope.getMergeHistory = function (pageNo) {
            $scope.$parent.boolShowAddContact = true;
            $scope.mergeHistory = [];
            var params = 'limit=' + $scope.pagination.limitmerge;
            if (typeof pageNo == 'undefined') {
                pageNo = 0;
            }
            pageNo = ((pageNo > 0) ? pageNo - 1 : pageNo);
            //params += '&page=' + ((pageNo > 0) ? pageNo - 1 : pageNo);
            params += '&page=' + pageNo;
            $scope.loading = true;
            Contact.mergeHistory(params, function (response, err) {
                $scope.loading = false;
                $scope.mergeCurrentPage = pageNo;
                $scope.mergeTotalItems = response.data.data.total;
                                
                $scope.paginationDetailsMerge = pageNo + 1 + "/" + response.data.data.pages;
                $scope.paginationTotalPagesMerge = response.data.data.pages;
                var tocount = (pageNo + 1) * $scope.pagination.limitmerge;
                var fromcount = pageNo == 0 ? 1 : tocount - $scope.pagination.limitmerge;
                tocount = tocount > response.data.data.total ? response.data.data.total : tocount;

                $scope.paginationDisplayItemMerge = fromcount + " - " + tocount;


                if ($scope.mergeTotalItems > 0) {
                    $scope.mergeHistory = response.data.data.data;
                } else {
                    //no merge contacts
                    $scope.mergeHistory = [];
                }
            })
        };
        $scope.restoreContact = function (historyId, $index) {
            var arrobjhistory = [];
            var unmerge = [];
            if (typeof historyId !== 'undefined') {
                if ($scope.unmergeContact[historyId]) {
                    angular.forEach($scope.unmergeContact[historyId], function (value, key) {
                        if (true == value) {
                            unmerge.push(key);
                        }
                    });
                    if (unmerge.length > 0) {
                        var objhistory = {};
                        objhistory.id = historyId;
                        objhistory.contact_ids = unmerge;
                        arrobjhistory.push(objhistory)

                        Contact.unmergeContacts({history: arrobjhistory}, function (response, err) {
                            if (response.data.status) {
                                $scope.load_groups();

                                //remove element from the scope                             
                                $scope.unmergeContact = [];
                                $scope.getMergeHistory();
                                // $scope.mergeHistory.splice($index, 1);
                            } else {
                                toasty.error({
                                    msg: $filter('translate')('ERROR_UNMERGE')
                                });
                            }
                        })
                    } else {
                        toasty.error({
                            msg: $filter('translate')('CONTACT_UNMERGE_VALIDATION')
                        });
                    }
                } else {
                    toasty.error({
                        msg: $filter('translate')('NO_CONTACT_UNMERGE')
                    });
                }
            } else {
                if ($scope.mergeHistory.length > 0) {
                    angular.forEach($scope.mergeHistory, function (contact) {
                        var objhistory = {};
                        var contact_ids = [];
                        objhistory.id = contact['_id'];
                        angular.forEach(contact.contacts, function (contact_list) {
                            if(contact.restore_ids.indexOf(contact_list._id) == -1)
                                contact_ids.push(contact_list._id);
                        });
                        objhistory.contact_ids = contact_ids;
                        if(contact_ids.length > 0){
                            arrobjhistory.push(objhistory);    
                        }                        
                    });
                    if (arrobjhistory.length > 0) {
                        Contact.unmergeContacts({history: arrobjhistory}, function (response, err) {
                            if (response.data.status) {
                                $scope.load_groups();
                                //remove element from the scope
                                $scope.unmergeContact = [];
                                // $scope.mergeHistory = [];
                                //reload tab data
                                $scope.getMergeHistory();
                            } else {
                                toasty.error({
                                    msg: $filter('translate')('ERROR_UNMERGE')
                                });
                            }
                        })
                    } else {
                        toasty.error({
                            msg: $filter('translate')('NO_CONTACT_UNMERGE')
                        });
                    }
                } else {
                    toasty.error({
                        msg: $filter('translate')('NO_CONTACT_UNMERGE')
                    });
                }
            }
        };
        $scope.dismiss = function ($index) {
            if (typeof $index !== 'undefined') {
                //remove element from the scope                             
                $scope.duplicate_contacts.splice($index, 1);
            } else {
                //remove element from the scope
                $scope.duplicate_contacts = [];
                //reload tab data
                $scope.findDuplicates();
            }

        };
        $scope.saveState = function () {
//            $.jgrid.saveState("contact-grid");
            var gridState = $('#contact-grid').jqGrid('getGridParam');
            var gridJSON = {rowNum: gridState.rowNum.toString(), page: gridState.page, reccount: gridState.reccount};
            $cookies.put('gridState', JSON.stringify(gridJSON));
        };
        $scope.loadState = function () {
//            $.jgrid.loadState("contact-grid");
            if ($cookies.get('gridState')) {
                var gridState = JSON.parse($cookies.get('gridState'));
                $('#contact-grid').setGridParam(gridState).trigger('reloadGrid');
                $('.ui-pg-selbox').val(gridState.rowNum);
            }
        };
        $scope.alert = function (text) {
            alert(text);
        };
        $(".group-list, .grid-filter").bind('click', function (event) {
            event.stopPropagation();
        });
        $document.bind('click', function () {
            if ($scope.show_group) {
                $scope.show_group = false;
            }

            if ($scope.show_filter) {
                $scope.show_filter = false;
            }

            if ($scope.show_sort) {
                $scope.show_sort = false;
            }
        });

        $scope.pageChanged = function (type) {
            if (type && type == 'merge') {
                $scope.getMergeHistory($scope.mergeCurrentPage);
                $log.log('Page changed to: ' + $scope.mergeCurrentPage);
            } else {
                $scope.findDuplicates($scope.duplicateCurrentPage);
                $log.log('Page changed to: ' + $scope.duplicateCurrentPage);
            }
        };
        $scope.composeQMail = function (email) {
            CGI.getAppInfo('qmail', function (response, err) {
                if (response.data.data.value != undefined) {
                    if (response.data.data.value == 'FALSE') {
                        toasty.error({
                            msg: $filter('translate')('QMAIL_DISABLED')
                        });
                    } else if (response.data.data.value == 'TRUE') {
                        var user = ($cookies.get('user')) ? JSON.parse($cookies.get('user')) : {};
                        window.open(config.QMAIL_URL + email + '&_sid=' + user.sid, "_blank", "toolbar=yes, scrollbars=yes, resizable=yes, top=200, left=500, width=700, height=600");
                    }
                } else {
                    toasty.error({
                        msg: $filter('translate')('QMAIL_NOT_INSTALLED')
                    });
                }

            });
        };
    }]);


'use strict';

app.controller('ContactFormCtrl', ['$scope', 'Contact', '$routeParams', '$location', 'ngDialog', 'Group', '$filter', '$cookies', 'toasty', '$window', '$rootScope', 'CGI',
    function ($scope, Contact, $routeParams, $location, ngDialog, Group, $filter, $cookies, toasty, $window, $rootScope, CGI) {
        $scope.show_group = false;
        $scope.base_url = config.BASE_URL;
        $scope.pic_url = config.PIC_URL;
        $scope.api_url = config.API_URL;
        $scope.attachmentsToDelete = [];
        $scope.uploading = false;
        $scope.temp = false;
        $scope.show_title = false;
        $scope.show_nickname = false;
        $scope.unsaved_form = false;
        $scope.rand = Math.random();
        $scope.selected_picture = '';
        $scope.accessToken = $cookies.get('accessToken');
        $scope.is_favorite = false;
        $scope.is_locked = false;
        $scope.contact = {
            groups: {checked:[]}
        }
        $('.contact-form .right-column').height($( window ).height()-180);
        $scope.uploadType = '';
        $( window ).resize(function() {
          $('.contact-form .right-column').height($( window ).height()-180);
        });
        $scope.$parent.boolShowAddContact = true;
        $scope.changeSelectedPic = function (profile_pic) {
            $scope.selected_picture = profile_pic;
            if (!$scope.$$phase) $scope.$apply();
        };

        $scope.updateContactObject = function () {
            $scope.$parent.openResetHighSecurityPassword(true, function(state){
                if ($scope.contact._id && state) {
                    $scope.contact.is_favorite = $scope.is_favorite;
                    $scope.contact.is_locked = $scope.is_locked;
                    
                    $scope.contact.groups = { checked: [], unchecked: [] };
                    $('.groups-checklist input[type="checkbox"]').each(function () {
                        var $this = $(this);
                        if ($this.is(":checked")) {
                            $scope.contact.groups.checked.push({ group_id: $this.attr("id") });
                        } else {
                            $scope.contact.groups.unchecked.push({ group_id: $this.attr("id") });
                        }
                    });
                    if($scope.contact.groups.checked.length > 0)
                        $('.group-icon-container > i').removeClass('icon-group').addClass('icon-group-active');
                    else 
                        $('.group-icon-container > i').removeClass('icon-group-active').addClass('icon-group');
                } else {
                    $scope.is_locked = !$scope.is_locked;
                }
            });
        };

        $scope.closeGroupsDiv = function () {
            $scope.show_group = false;
            $scope.showCreateGroup = false;
            if (!$scope.$$phase) $scope.$apply();
        };

        if ($routeParams.contactId) {
            $scope.temp = true;
            $scope.contactId = $routeParams.contactId;
            Contact.getContact($scope.contactId, function (response, err) {
                $scope.contact = response.data.data || {};
                $scope.is_favorite = $scope.contact.is_favorite;
                delete($scope.contact.is_favorite);
                $scope.is_locked = $scope.contact.is_locked;
                delete($scope.contact.is_locked);
                if ($scope.contact.profile_pic) {
                    $scope.contact.profile_pic = $scope.pic_url + $scope.contact.profile_pic;
                }
                if ($scope.contact.profile_pic_history) {
                    $scope.contact.profile_pic_history.forEach(function (pic_history, index) {
                        $scope.contact.profile_pic_history[index] = $scope.pic_url + pic_history;
                    });
                }
                if (!$scope.contact.others)
                    $scope.contact.others = [];

                if ($scope.contact.title) {
                    $scope.show_title = true;
                }
                if ($scope.contact.nickname) {
                    $scope.show_nickname = true;
                }
                if ($scope.contact.emails == undefined || $scope.contact.emails.length == 0) {
                    $scope.contact.emails = [{ label: 'HOME', value: '', is_primary: false }];
                }
                if ($scope.contact.phones == undefined || $scope.contact.phones.length == 0) {
                    $scope.contact.phones = [{ label: 'HOME', value: '', is_primary: false }];
                }
                if ($scope.contact.addresses == undefined || $scope.contact.addresses.length == 0) {
                    $scope.contact.addresses = [{ label: 'Home', value: '' }, { label: 'Office', value: '' }];
                }
                if ($scope.contact.im == undefined || $scope.contact.im.length == 0) {
                    $scope.contact.im = [{ label: 'SKYPE', value: '' }];
                }
                if ($scope.contact.web_pages == undefined || $scope.contact.web_pages.length == 0) {
                    $scope.contact.web_pages = [{ label: 'OFFICE', value: '' }];
                }
                $scope.file = response.data.data ? response.data.data.profile_pic : "";
                if($scope.contact.events && $scope.contact.events.length > 0){
                    $scope.contact.events.forEach(function (eventsDate) {
                        if (eventsDate.value) {
                            eventsDate.value = new Date(eventsDate.value);
                        }
                    });
                } else {
                    $scope.contact.events = [{ label: 'BIRTH_DATE', value: null, opened: false }, { label: 'ANNIVERSARY', value: null, opened: false }];
                }

                $scope.getGroupStatus();
            });
        } else {
            $scope.contact = {
                emails: [{ label: 'HOME', value: '', is_primary: false }],
                phones: [{ label: 'HOME', value: '', is_primary: false }],
                addresses: [{ label: 'HOME', value: '' }, { label: 'OFFICE', value: '' }],
                im: [{ label: 'SKYPE', value: '' }],
                events: [{ label: 'BIRTH_DATE', value: null, opened: false }, { label: 'ANNIVERSARY', value: null, opened: false }],
                web_pages: [{ label: 'OFFICE', value: '' }],
                others: [],
                groups: [],
                attachments: [],
                profile_pic_history: []
            };
        }

        $scope.editedContact = angular.copy($scope.contact);
        $scope.selectAttachmentTemp = [];
        $scope.filesSelectedFromNAS = [];
        $scope.openPhotoSelector = function () {
            $scope.uploadType = 'profile_pic';
            $scope.rand = Math.random();
            $scope.base_url = '';
            ngDialog.open({
                template: 'views/partials/contact-picture-selector.html',
                scope: $scope,
                closeByDocument: false,
                className: 'ngdialog-theme-default custom-width-750'
            });
        };

        $scope.attachement = [];

        $scope.removeTitle = function () {
            $scope.show_title = false;
            $scope.contact.title = null;
        };

        $scope.removeNickname = function () {
            $scope.show_nickname = false;
            $scope.contact.nickname = null;
        };

        $scope.add_new_email = function (emailType) {
            if(!$scope.contact.emails) $scope.contact['emails'] = [];
            $scope.contact.emails.push({ label: emailType, value: '', is_primary: false });
        };
        $scope.remove_new_email = function (index) {
            $scope.contact.emails.splice(index, 1);
        };
        $scope.add_new_phone = function (phoneType) {
            if(!$scope.contact.phones) $scope.contact['phones'] = [];
            $scope.contact.phones.push({ label: phoneType, value: '', is_primary: false });
        };
        $scope.remove_new_phone = function (index) {
            $scope.contact.phones.splice(index, 1);
        };
        $scope.add_new_address = function () {
            if(!$scope.contact.addresses) $scope.contact['addresses'] = [];
            $scope.contact.addresses.push({ label: 'HOME', value: '' });
        };
        $scope.remove_new_address = function (index) {
            $scope.contact.addresses.splice(index, 1);
        };
        $scope.add_new_im = function (imType) {
            if(!$scope.contact.im) $scope.contact['im'] = [];
            $scope.contact.im.push({ label: imType, value: '' });
        };
        $scope.remove_new_im = function (index) {
            $scope.contact.im.splice(index, 1);
        };
        $scope.add_new_event = function (eventType) {
            if(!$scope.contact.events) $scope.contact['events'] = [];
            $scope.contact.events.push({ label: eventType, value: null, opened: false });
        };
        $scope.remove_new_event = function (index) {
            $scope.contact.events.splice(index, 1);
        };
        $scope.add_new_webpage = function () {
            if(!$scope.contact.web_pages) $scope.contact['web_pages'] = [];
            $scope.contact.web_pages.push({ label: 'OFFICE', value: '' });
        };
        $scope.remove_new_webpage = function (index) {
            $scope.contact.web_pages.splice(index, 1);
        };
        $scope.add_new_other = function () {
            if(!$scope.contact.others) $scope.contact['others'] = [];
            $scope.contact.others.push({});
        };
        $scope.remove_new_other = function (index) {
            $scope.contact.others.splice(index, 1);
        };

        $scope.setPrimaryEmail = function (index) {
            $scope.contact.emails.forEach(function (email) {
                email.is_primary = false;
            });
            $scope.contact.emails[index].is_primary = true;
        };

        $scope.setPrimaryPhone = function (index) {
            $scope.contact.phones.forEach(function (phone) {
                phone.is_primary = false;
            });
            $scope.contact.phones[index].is_primary = true;
        };

        $scope.open = function ($event, index) {
            $event.preventDefault();
            $event.stopPropagation();

            $scope.contact.events[index].opened = true;
        };

        $scope.initTelDD = function (index) {
            setTimeout(function () {
                $("#phone_" + index).intlTelInput({
                    nationalMode: false,
                    utilsScript: 'lib/intl-tel-input/build/js/utils.js',
                    initialCountry: 'auto',
                    geoIpLookup: function (callback) {
                        $.get('http://ipinfo.io', function () { }, "jsonp").always(function (resp) {
                            var countryCode = (resp && resp.country) ? resp.country : "";
                            callback(countryCode);
                        });
                    }
                });
            }, 10);
        };

        $scope.resetFileChooserOptions = function(file_chooser_option) {
            if (file_chooser_option == 'choose_local_file') {
                $scope.filesSelectedFromNAS = [];
            } else if (file_chooser_option == 'choose_nas_file') {
                $scope.selectAttachmentTemp = [];
            }
        };

        $rootScope.$on('selectedNASFile', function (event, data) {
            if ($scope.uploadType == 'attachment') {
                _.filter(data, function (nasFile) {
                    $scope.filesSelectedFromNAS.push(nasFile);
                });
            } else if ($scope.uploadType == 'profile_pic') {
                // var contactId = ($scope.contact._id != undefined) ? $scope.contact._id : null;
                // Contact.uploadFromNAS(contactId, data, 'attachment', function (response, err) {
                //     if (response.data.status) {
                //         console.log(config.PIC_URL + response.data.data.file_details[0].path);
                //     }
                // });
            }
        });


        // upload on file select or drop
        $scope.uploadProfilePic = function (croppedDataUrl, name) {
            $scope.data_url = croppedDataUrl;
            $scope.pic_name = name;
            var contactId = ($scope.contact._id != undefined) ? $scope.contact._id : null;

            if ($scope.data_url != undefined && $scope.pic_name != undefined) {
                Contact.uploadContactPicture(contactId, $scope.data_url, $scope.pic_name, function (response, err) {
                    if (contactId == null) {
                        contactId = response.data.data.contact_id;
                        $scope.contact._id = contactId;
                    }
                    //attach base url before showing image on the UI.
                    $scope.contact.profile_pic = config.PIC_URL + response.data.data.profile_pic;
                    $scope.rand = Math.random();
                });
            }
            ngDialog.close();
        };

        $scope.openFileUpload = function () {
            $scope.uploadType = 'attachment';
            ngDialog.open({
                template: 'views/partials/AttachFileContact.html',
                closeByDocument: false,
                scope: $scope
            });
        };


        $scope.tempStoreAttachment = function (attachments, errFiles) {
            $scope.errFile = errFiles && errFiles[0];
            if ($scope.errFile) {
                toasty.error({
                    msg: $scope.errFile.name + ' \n \n ' + $filter('translate')('FILE_VALIDATION') + ' \n \n ' + $scope.errFile.$errorParam
                });
                return;
            }
            if (attachments.length > 0)
                $scope.selectAttachmentTemp.push(attachments);

        };
               
        $scope.uploadAttachment = function (file_chooser_options) {
            if (file_chooser_options == 'choose_nas_file') {
                var contactId = ($scope.contact._id != undefined) ? $scope.contact._id : null;

                Contact.uploadFromNAS(contactId, $scope.filesSelectedFromNAS, 'attachment', function (response, err) {
                    if (response.data.status) {
                        _.filter(response.data.data.file_details, function (nasFile) {
                            $scope.contact.attachments.push({file_type:'text/plain', label: nasFile.label, value: nasFile.path});
                        });
                        $scope.filesSelectedFromNAS = [];
                        ngDialog.close();
                    }
                });
            } else if (file_chooser_options == 'choose_local_file') {
                var attachments = $scope.selectAttachmentTemp;
                var contactId = ($scope.contact._id != undefined) ? $scope.contact._id : null;

                if (attachments && $scope.contact.attachments.length < 10) {
                    attachments.forEach(function (imageFile) {
                        $scope.uploading = true;
                        Contact.uploadAttachment(contactId, imageFile[0], function (response, err) {
                            if (contactId == null) {
                                contactId = response.data.data.contact_id;
                                $scope.contact._id = contactId;
                            }
                            if (!response.data.data.attachments[0]) {
                                toasty.error({
                                    msg: $filter('translate')('UNABLE_TO_UPLOAD')
                                });
                                ngDialog.close();
                                return;
                            }
                            $scope.contact.attachments.push(response.data.data.attachments[0]);
                            $scope.uploading = false;
                            $scope.selectAttachmentTemp = [];
                            ngDialog.close();
                        });
                    });
                } else {
                    toasty.error({
                        msg: $filter('translate')('UNABLE_TO_UPLOAD')
                    });
                }
            }
        };

        $scope.closeAttachmentDialog = function () {
            $scope.selectAttachmentTemp = [];
            $scope.filesSelectedFromNAS = [];
            ngDialog.close();
        };

        $scope.deleteAttachment = function (attachment, index) {
            $scope.attachmentsToDelete.push(attachment);
            $scope.contact.attachments = _.filter($scope.contact.attachments, function (attach) {
                return attach && attach._id != attachment._id;
            });
        };

        $scope.$on('$locationChangeStart', function (event, next, current) {
            if (!$scope.contactForm.$pristine && !$scope.formsubmit) {

                var r = confirm($filter('translate')('UNSAVED_DATA_WARNING'));
                $scope.formsubmit = true;
                if (r === false) {
                    event.preventDefault();
                    $scope.formsubmit = false;
                }
            }
        });

        $scope.formsubmit = false;
        $scope.saveContact = function (contactForm, contact) {
            // $scope.$broadcast('runCustomValidations');
            $scope.formsubmit = true;
            
            if (contactForm.$valid) {
                $scope.contact.is_favorite = $scope.is_favorite;
                $scope.contact.is_locked = $scope.is_locked;
                var count = 0;
                $scope.contact.phones.forEach(function (phone) {
                    if ($("#phone_" + count).intlTelInput("isValidNumber")) {
                        phone.value = $("#phone_" + count).intlTelInput("getNumber");
                    } else {
                        phone.value = $("#phone_" + count).val();
                    }
                    count = count + 1;
                });

                if (contact.profile_pic) {
                    contact.profile_pic = contact.profile_pic.replace(config.PIC_URL,'');
                }

                if (contact.profile_pic_history) {
                    contact.profile_pic_history.forEach(function (pic_history, index) {
                        var profile_pic = pic_history.replace(config.PIC_URL,'')
                        contact.profile_pic_history[index] = profile_pic;
                    });
                }

                if (contact._id && $scope.temp) {
                    $scope.contact.groups = { checked: [], unchecked: [] };
                    $('.groups-checklist input[type="checkbox"]').each(function () {
                        var $this = $(this);
                        if ($this.is(":checked")) {
                            $scope.contact.groups.checked.push({ group_id: $this.attr("id") });
                        } else {
                            $scope.contact.groups.unchecked.push({ group_id: $this.attr("id") });
                        }
                    });
                    Contact.updateContacts(contact._id, contact, function (response, err) { });
                } else {
                    $('.groups-checklist input[type="checkbox"]:checked').each(function () {
                        var $this = $(this);
                        if ($this.is(":checked")) {
                            $scope.contact.groups.push({ group_id: $this.attr("id") });
                        }
                    });
                    Contact.createContact(contact, function (response, err) { });
                }

                var deleteAttachment = {
                    contact_id: contact._id,
                    attachments: $scope.attachmentsToDelete
                };
                
                Contact.deleteAttachment(deleteAttachment, function (response, err) { });
                $location.path('/contacts');
            }
        };



        $scope.cancelContact = function () {
            if ($scope.unsaved_form === false) {
                $window.history.back();
            } else {
                var r = confirm($filter('translate')('UNSAVED_DATA_WARNING'));
                $scope.formsubmit = true;
                if (r === true) {
                    $window.history.back();
                    $scope.unsaved_form = false;
                }
            }
        };

        $scope.getGroupStatus = function () {
            if ($scope.contact._id != undefined) {
                Group.getBatchGroupStatus({ contact_ids: [$scope.contact._id] }, function (response, err) {
                    var is_group_selected = false;
                    if(response.data.data && response.data.data.length > 0){
                        if (response.data.data[0].status == 'all') {
                            response.data.data.forEach(function (group) {
                                $('#' + group.group_id).prop('checked', true);
                                is_group_selected = true;
                            });
                        } else {
                            response.data.data.forEach(function (group) {
                                $('#' + group.group_id).prop('checked', false);
                            });
                        }
                    }
                    if(is_group_selected)
                        $('.group-icon-container > i').removeClass('icon-group').addClass('icon-group-active');
                });
            }
        };
        

        $scope.$watch("contact", function (newValue, oldValue) {
            if (typeof oldValue === 'undefined') return;

            if (newValue !== oldValue) {
                //  $scope.unsaved_form = true;
                // $scope.formsubmit = false;
                $scope.unsaved_form = !angular.equals($scope.editedContact, newValue);
            }
        }, true);

    }]);
'use strict';

app.controller('ExportCtrl', ['$scope', 'Export', 'BackgroundTask', 'ngDialog', '$filter', 'Private', '$http', 'SID', '$cookies','toasty', 
    function ($scope, Export, BackgroundTask, ngDialog, $filter, Private, $http, SID, $cookies, toasty) {
    $scope.exportCSV = function(export_criteria, export_format) {
        var query = {};
        if (export_format == undefined || export_format.length == 0) {
            query.export_type = ["mycontact-csv"];
        } else {
            query.export_type = [];
            _.each(export_format, function(value, key){
                if (value){
                    switch (key) {
                        case 'mycontact_csv':
                            query.export_type.push("mycontact-csv");
                            break;
                        case 'vcard':
                            query.export_type.push("vcard");
                            break;
                        case 'google_csv':
                            query.export_type.push("google-csv");
                            break;
                    }
                }
            });
            if (query.export_type.length == 0) {
                query.export_type = ["mycontact-csv"];
            }
        }
        
        if (export_criteria == undefined && $scope.selectedContacts.length == 0) {
            toasty.error({                    
                msg: $filter('translate')('SELECT_EXPORT_CRITERIA')
            });
            return false;
        } else {
            query.is_active = true;
            switch (export_criteria.category) {
                case 'is_selected':
                    if ($scope.selectedContacts.length > 0) {
                        if ($scope.menu.private) {
                            $cookies.put('export_type', query.export_type);
                            $scope.openVerifyHighSecurity();
                        } else {
                            query.contact_ids = $scope.selectedContacts;
                            $scope.processExport(query);
                        }
                    } else {
                        toasty.error({
                            msg: $filter('translate')('SELECT_EXPORT_CRITERIA')
                        });
                        return false;
                    }
                    break;
                case 'is_favorites':
                    query.is_favorite = true;
                    $scope.processExport(query);
                    break;
                case 'is_groups':
                    query.group_ids = [export_criteria.group_id];
                    _.filter($scope.groups, function(group){
                        if (export_criteria.group_id == group._id) {
                            if (group.contacts_count < 1) {
                                toasty.error({
                                    msg: $filter('translate')('NO_CONTACTS_TO_EXPORT')
                                });
                            } else {
                                $scope.processExport(query);
                            }
                        }
                    });
                    break;
                case 'is_private':
                    query.is_locked = true;
                    $cookies.put('export_type', query.export_type);
                    $scope.openVerifyHighSecurity();
                    break;
                case 'is_default':
                    var selected_export_type = query.export_type;
                    query = {};
                    query.export_type = selected_export_type;
                    $scope.processExport(query);
                    break;
            }
        }
    };
    
    $scope.openVerifyHighSecurity = function() {
        ngDialog.open({
            template: 'views/partials/verify-security-for-export.html',
            controller: 'ExportCtrl',
            className: 'ngdialog-theme-default custom-width-550',
            closeByDocument: false
        });
    };
    
    $scope.verifyHighSecurity = function (verifyHighSecurityForm, security) {
        $scope.$broadcast('runCustomValidations');
        if (verifyHighSecurityForm.$valid) {
            security.high_security_password = SID.ezEncode(security.high_security_password);
            Private.getSecondaryToken(security, function (response, err) {
                if (response.data.status) {
                    var secondary_token = response.data.data.secondary_token;
                    $http.defaults.headers.common['Highsecurity'] = 'Bearer ' + secondary_token;
                    $cookies.put('secondaryToken', 'Bearer ' + secondary_token);

                    ngDialog.close();
                    var query = {};
                    query.export_type = $cookies.get('export_type').split(",");
                    query.is_locked = true;
                    $cookies.remove('export_type');
                    if ($scope.selectedContacts && $scope.selectedContacts.length > 0) {
                        query.contact_ids = $scope.selectedContacts;
                    }
                    $scope.processExport(query);
                } else {
                    security.high_security_password = "";
                    toasty.error({                    
                        msg: $filter('translate')('WRONG_HIGH_SECURITY_PASSWORD')
                    });                     
                }
            });
        }
    };
    
    $scope.processExport = function(query) {
        Export.exportFile(query, function (response, err) {
            switch (response.data.status_code) {
                case 10001:
                    ngDialog.open({
                        template: 'views/partials/exporting-loader.html',
                        controller: 'MainCtrl',
                        closeByDocument: false
                    });
                    break;
                case 10022:
                    toasty.error({
                        msg: $filter('translate')('COUNT_LIMIT_IMPOSED')
                    });
                    break;
                case 10023:
                    toasty.error({
                        msg: $filter('translate')('NO_CONTACTS_TO_EXPORT')
                    });
                    break;
                case 10024:
                    toasty.error({
                        msg: $filter('translate')('INVALID_EXPORT_TYPE')
                    });
                    break;
            }
            
            BackgroundTask = BackgroundTask.connect();
            BackgroundTask.on('task:progress', function(data) {                
                if(data.progress == '100%'){
                    ngDialog.close();
                }
                if(!$scope.$$phase) $scope.$apply();
            });
        });
    };
}]);
(function () {
    'use strict';

    app.controller('FileBrowserCtrl', ['$scope', 'ngDialog', 'CGI', '$rootScope', function ($scope, ngDialog, CGI, $rootScope) {
        //Tree control for NAS file chooser - start
        $scope.type = $scope.ngDialogData.type;
        $scope.multiselect = $scope.ngDialogData.multiselect;
        $scope.folderSelect = $scope.ngDialogData.folderSelect;

        $scope.treeOptions = {
            nodeChildren: "children",
            dirSelectable: true,
            isLeaf: function (node) {
                return node.iconCls == 'folder';
            },
            injectClasses: {
                ul: "a1",
                li: "a2",
                liSelected: "a7",
                iExpanded: "a3",
                iCollapsed: "a4",
                iLeaf: "a5",
                label: "a6",
                labelSelected: "a8" 
            }
        };

        $scope.expandedNodes = [];

        $scope.getNASFile = function(filePath){
            $scope.navigatorArray = [];
            $scope.selectedFiles = [];

            CGI.getFoldersStructure($scope.userDetails.sid, filePath, function (response, err) {
                if (response.status == 200) {
                    if (response.data instanceof Array) {
                        $scope.nasDir = [];
                        _.filter(response.data, function(dir){
                            $scope.nasDir.push({id: dir.id, text: dir.text, children: []});
                        });
                    }
                }
                
                $scope.loadSelected($scope.nasDir[0]);
            });
        };

        $scope.navigate = function (action) {
            var node_id = $scope.selectedTreeNode.id;

            _.each($scope.navigatorArray, function (item, i) {
                if (item.id == node_id) {
                    switch (action) {
                        case 'back':
                            if (i > -1) {
                                if ($scope.navigatorArray[i-1]) {
                                    $scope.expandedNodes.splice(i,1);
                                    $scope.loadSelected($scope.navigatorArray[i-1], true);
                                }
                            }
                            break;
                        case 'forward':
                            if (i < $scope.navigatorArray.length) {
                                if ($scope.navigatorArray[i+1]) {
                                    $scope.loadSelected($scope.navigatorArray[i+1], true);
                                }
                            }
                            break;
                    }
                }
            });
        };

        $scope.selectNASFile = function (index, fileDetails, event) {
            if (!fileDetails.isfolder && !$scope.folderSelect) {
                if (event.ctrlKey && $scope.multiselect) {
                    $('#filename_'+index).attr('class', 'success');
                } else {
                    $('tr[id^="filename_"]').removeClass('success');
                    $scope.selectedFiles = [];
                    $('#filename_'+index).attr('class', 'success');
                }
                $scope.selectedFiles.push({path:$scope.selectedTreeNode.id, name:fileDetails.filename});
            } else if (fileDetails.isfolder && $scope.folderSelect) {
                if (event.ctrlKey && $scope.multiselect) {
                    $('#filename_'+index).attr('class', 'success');
                } else {
                    $('tr[id^="filename_"]').removeClass('success');
                    $scope.selectedFiles = [];
                    $('#filename_'+index).attr('class', 'success');
                }
                $scope.selectedFiles.push({path:$scope.selectedTreeNode.id, name:fileDetails.filename});
            }
        };

        $scope.sendSelectedNASFile = function () {
            $rootScope.$emit('selectedNASFile', $scope.selectedFiles);
        };

        $scope.selectNASFolder = function (folderDetails) {
            if (folderDetails.isfolder) {
                _.each($scope.nasDirDetails, function (dir) {
                    if (dir.id == $scope.selectedTreeNode.id+'/'+folderDetails.filename) {
                        $scope.loadExpanded($scope.selectedTreeNode);
                        $scope.loadSelected({id: dir.id, text: dir.text, children: []});
                    }
                });
                $scope.selectedFiles = [];
            }
        };
        
        $scope.loadSelected = function (node, navigate) {
            $scope.loading = true;
            if (!$scope.selectedTreeNode || $scope.selectedTreeNode.id != node.id) {
                if (!navigate) {
                    $scope.navigatorArray.push(node);
                }
                $scope.selectedFiles = [];
                $scope.selectedTreeNode = node;
                CGI.getFilesStructure($scope.userDetails.sid, node.id, $scope.type, function (response, err) {
                    if (response.status == 200) {
                        if (response.data.datas instanceof Array) {
                            $scope.nasFileDetails = response.data.datas;
                            $scope.totalContentSize = 0;
                            _.each($scope.nasFileDetails, function (nasFile) {
                                $scope.totalContentSize = parseInt($scope.totalContentSize) + parseInt(nasFile.filesize);
                            });
                        }
                    }
                });
                CGI.getFoldersStructure($scope.userDetails.sid, node.id, function(response, err){
                    if (response.status == 200) {
                        if (response.data instanceof Array) {
                            $scope.nasDirDetails = response.data;
                        }
                    }
                });
            } else {
                $scope.selectedTreeNode = [];
                $scope.nasFileDetails = [];
                $scope.selectedFiles = [];
            }
            $scope.loading = false;
        };

        $scope.loadExpanded = function(node, expanded) {
            if (expanded) {
                $scope.loading = true;
                $scope.expandedNodes.push(node);
                CGI.getFoldersStructure($scope.userDetails.sid, node.id, function(response, err){
                    if (response.status == 200) {
                        var treeData = [];
                        if (response.data instanceof Array) {
                            $scope.nasDirDetails = response.data;
                            _.filter(response.data, function(dir){
                                treeData.push({id: dir.id, text: dir.text, children: []});
                            });
                            if (treeData.length > 0) {
                                $scope.addSubTree($scope.nasDir, node, treeData);
                            }
                        }
                    }
                    $scope.loading = false;
                });
            } else {
                _.filter($scope.expandedNodes, function(expandedNode, i){
                    if (expandedNode && expandedNode.id.indexOf(node.id) > -1) {
                        $scope.expandedNodes.splice(i);
                    }
                });
            }
        };

        $scope.addSubTree = function (nasDir, node, treeData) {
            $.grep(nasDir, function (dir) {
                if (dir.children.length > 0) {
                    _.each(dir.children, function (item) {
                        if (item.id == node.id) {
                            item.children = treeData;
                        } else {
                            if (item.children.length > 0) {
                                $scope.addSubTree(item.children, node, treeData);
                            }
                        }
                    })
                } else {
                    if (dir.id == node.id) {
                        dir.children = treeData;
                    }
                }
            });
            $scope.nasDir = nasDir;
        };
        //Tree control for NAS file chooser - end
    }]);
})();
        
(function () {
    'use strict';

    app.controller('importFileCtrl', ['$scope', 'ngDialog', 'toasty', '$filter', 'Upload', 'Contact','$http','Preview', '$rootScope', 'Sync',
    function ($scope, ngDialog, toasty, $filter, Upload, Contact, $http, Preview, $rootScope, Sync) {

        $scope.setActiveTab = {};
        $scope.selectedCsvMapping = {};
        $scope.userDefinedTemplate = {};
        $scope.chooseMappingCSV = [];
        $scope.delimiterCSV = [];
        $scope.loadingFile = true;
        $scope.loading = true;
        $scope.uploadFileStoreTemp;
        $scope.uploadFileAndProceedToPreview;
        $scope.importCSVFile;
        $scope.mapping = {};
        $scope.mapping.selectedDelimiter = null;
        $scope.mapping.groupName = null;
        $scope.finishtab = {};
        $scope.finishtab.isAutoImportContact = true;
        $scope.openSaveTemplateDailogue;
        $scope.saveUserDefinedMappingTemplate;
        $scope.selectedCsvMappingChanged;
        $scope.openColumnMapping;
        $scope.configForDynamicGrid = {};
        $scope.dataToBindGrid = {};
        $scope.dataToBindGrid.data = [];
        $scope.filedMappingData = {};
        $scope.filedMappingData.columnNames = [];
        $scope.filedMappingData.dbColumnNames = [];
        $scope.mapperForServerSidePost = {};
        $scope.startImport;
        $scope.pagelimit = {};
        $scope.pagelimit.numberOfRecords = "25";
        $scope.pageNumber = 0;
        $scope.prevPage;
        $scope.nextPage;
        $scope.firstPage;
        $scope.lastPage;
        $scope.pages = 0;
        $scope.page = 0;
        $scope.total = 0;
        $scope.gridCreated = false;
        $scope.firstRow = {};
        $scope.firstRow.importFirstRow = false;
        $scope.fileuploadingProgressing = true;
        $scope.percentageupload = 0;
        $scope.isVcardFile = false;
        $scope.gotopreviouspage;
        
        var templateSaveDialog;
        var uploadingFileTransactionID;
        var setActiveInactive = {};
        setActiveInactive.ActiveContact_id = [];
        setActiveInactive.InactiveContact_id = [];
        setActiveInactive.is_active = true;
        $scope.chooseMappingCSVFromDB = [];
       
        $scope.setActiveTab = {
            tab1: true,
            tab2: false,
            tab3: false,
            tab4: false
        };

        $scope.userDefinedTemplate.template_name = null;
        $scope.userDefinedTemplate.delimiter = null;
        $scope.userDefinedTemplate.mapper = [];
        $scope.importOnFinish;

        $scope.selectedCsvMappingChanged = function (newSelectedMapping) {
            if (newSelectedMapping) {
                $scope.$evalAsync(function () {
                    $scope.mapping.selectedDelimiter = newSelectedMapping.delimiter;
                });
                setAutoColumns(newSelectedMapping);
            }
        };

        function setAutoColumns(newSelectedMapping) {

            angular.forEach($scope.chooseMappingCSVFromDB, function (value, key) {
                if (value.template_name == newSelectedMapping.template_name) {
                    angular.forEach(value.mapper, function (mapvalue, mapkey) {
                        angular.forEach($scope.filedMappingData.columnNames, function (displayValue, displayKey) {
                            var tempDefaultObj = {};
                            tempDefaultObj.name = "Save to Comment";
                            tempDefaultObj.value = "";
                            displayValue.value = tempDefaultObj;
                        });
                    });
                }
            });

            angular.forEach($scope.chooseMappingCSVFromDB, function (value, key) {
                if (value.template_name == newSelectedMapping.template_name) {
                    angular.forEach(value.mapper, function (mapvalue, mapkey) {
                        angular.forEach($scope.filedMappingData.columnNames, function (displayValue, displayKey) {
                            if (displayValue.name == mapvalue.map_name) {
                                var selectedValue = {};
                                selectedValue.name = mapvalue.display_name;
                                selectedValue.value = mapvalue.field_value;
                                displayValue.value = selectedValue;
                            }
                        });
                    });
                }
            });
        }
        
        $scope.openSaveTemplateDailogue = function () {
            $scope.userDefinedTemplate = {
                template_name: null, delimiter: $scope.mapping.selectedDelimiter
            };
            templateSaveDialog = ngDialog.open({
                template: 'views/partials/import-save-template.html',
                scope: $scope,
                closeByDocument: false,
                className: 'ngdialog-theme-default custom-width-360'
            });
        };

        $scope.saveUserDefinedMappingTemplate = function () {
            $scope.mapping.selectedDelimiter = $scope.userDefinedTemplate.delimiter;
            $scope.userDefinedTemplate.mapper = [];
            
            angular.forEach($scope.filedMappingData.columnNames, function (value, key) {
                var tempObj = {};
                tempObj.display_name = value.value.name;
                tempObj.map_name = value.name;
                tempObj.field_value = value.value.value;
                $scope.userDefinedTemplate.mapper.push(tempObj);
            });

            //var url = "http://172.17.28.89:9090/api/v1/imports/template";
            var url = "imports/template";
            Contact.saveUserDefinedColumnMappingIntoDB(url, $scope.userDefinedTemplate, function (res, err) {
                if (res.status) {
                    toasty.error({
                        msg: "Template Saved"
                    });
                    return;
                }
            });
            templateSaveDialog.close();
        };

        $scope.openNASFileChooser = function (type, multiselect, folderSelect) {
            var type = (type != undefined) ? type : null;
            var multiselect = (multiselect != undefined) ? multiselect : true;
            var folderSelect = (folderSelect != undefined) ? folderSelect : false;

            ngDialog.open({
                template: 'views/partials/nas-file-chooser.html',
                controller: 'FileBrowserCtrl',
                className: 'ngdialog-theme-default custom-width-900',
                closeByDocument: false,
                data: {type: type, multiselect: multiselect, folderSelect: folderSelect}
            });
        };

        $rootScope.$on('selectedNASFile', function (event, data) {
            $scope.selectedFile = data[0].path+'/'+data[0].name;

            Sync.uploadFromNAS(data, 'import', function (response, err) {
                if (response.data.status) {
                    $scope.selectedNASFileToImport = response.data.data.file_details[0].path;
                } else {
                    toasty.error({
                        msg: response.data.message
                    });
                }
            });
        });

        $scope.startImport = function () {
            $scope.mapperForServerSidePost.mapper = {};
            $scope.mapperForServerSidePost.delimiter = $scope.mapping.selectedDelimiter;
            $scope.mapperForServerSidePost.group_name = $scope.mapping.groupName;
            $scope.mapperForServerSidePost.import_first_row = $scope.firstRow.importFirstRow;

            angular.forEach($scope.filedMappingData.columnNames, function (value, key) {
                if (value.value == null) {
                    $scope.mapperForServerSidePost.mapper[value.name] = "";
                } else if (value.value.name != "Ignore") {
                    $scope.mapperForServerSidePost.mapper[value.name] = value.value.value;
                }
                // $scope.mapperForServerSidePost.mapper[value.name] = value.value == null? "": value.value.value;
            });

            $scope.setActiveTab.tab4 = true;
            $scope.mapperForServerSidePost.is_direct_import = $scope.finishtab.isAutoImportContact;
            var startImportURL = "contacts/tmp/" + uploadingFileTransactionID + "/import";
            Contact.startImportingContacts(startImportURL, $scope.mapperForServerSidePost, function (res, err) {
                if (res.status) {
                    ngDialog.close();
                    //toasty.error({
                    //    msg: "Preview is ready"
                    //});
                    //return;
                }
            });
        };

        $scope.uploadFileStoreTemp = function (attachmentFile, errorFile) {
            if (errorFile) {
                toasty.error({
                    msg: errorFile.name + ' \n \n ' + $filter('translate')('FILE_VALIDATION') + ' \n \n ' + errorFile.$errorParam
                });
                return;
            }
            if (attachmentFile) {
                $scope.importCSVFile = attachmentFile;
                if (attachmentFile.type == "text/x-vcard" || attachmentFile.type == "text/vcard") {
                    $scope.isVcardFile = true;
                } else {
                    $scope.isVcardFile = false;
                }
            }
        };

        $scope.prevPage = function () {
            setActiveInactiveRecordStatus();
            if ($scope.pageNumber > 0) {
                $scope.pageNumber = $scope.pageNumber - 1;
                var pagenum = $scope.page + 1;
                $scope.paginationDetails = pagenum + '/' + $scope.pages;
                getLoadedRecords();
            }
        };

        $scope.nextPage = function () {
            setActiveInactiveRecordStatus();
            if ($scope.pageNumber < $scope.pages -1) {
                $scope.pageNumber = $scope.pageNumber + 1;
                var pagenum = $scope.page + 1;
                $scope.paginationDetails = pagenum + '/' + $scope.pages;
                getLoadedRecords();
            }
        };

        $scope.firstPage = function () {
            setActiveInactiveRecordStatus();
            $scope.pageNumber = 0;
            $scope.paginationDetails = 1 + '/' + $scope.pages;
            getLoadedRecords();
        };

        $scope.lastPage = function () {
            setActiveInactiveRecordStatus();
            $scope.pageNumber = $scope.pages - 1;
            $scope.paginationDetails = $scope.pages + '/' + $scope.pages;
            getLoadedRecords();
        };

        $scope.gotoGroupNamePage = function () {
            $scope.setActiveTab.tab3 = true;
            setActiveInactiveRecordStatus();
        };

        $scope.gotopreviouspage = function () {
            if ($scope.isVcardFile == true) {
                $scope.setActiveTab.tab1 = true;
            } else {
                $scope.setActiveTab.tab2 = true;
            }
        };

        $scope.uploadFileAndProceedToPreview = function (import_type) {
            $scope.fileuploadingProgressing = true;
            $scope.percentageupload = 0;
            $scope.setActiveTab.tab2 = true;
            $scope.loadingFile = true;
            $scope.gridCreated = false;
            
            if (!import_type) {
                Sync.sendForImport($scope.selectedNASFileToImport, function (response, err) {
                    if (response.data.status) {
                        uploadingFileTransactionID = response.data.data.transaction_id;
                        $scope.mapping.groupName = response.data.data.group_name;

                        $scope.percentageupload = 100;
                        $scope.fileuploadingProgressing = false;

                        if (!$scope.setActiveTab.tab2) {
                            return;
                        }
                        if ($scope.isVcardFile == true) {
                            $scope.setActiveTab.tab3 = true;
                        } else {
                            getLoadedRecords();
                        }
                    } else {
                        $scope.setActiveTab.tab1 = true;
                        toasty.error({
                            msg: response.data.message
                        });
                    }
                });
            } else {
                Upload.upload({
                    url: config.API_URL + "imports",
                    data: { import: $scope.importCSVFile }
                }).then(function (response, err) {
                    if (response.data.status) {
                        uploadingFileTransactionID = response.data.data.transaction_id;
                        $scope.mapping.groupName = response.data.data.group_name;
                    } else {
                        toasty.error({
                            msg: response.data.message
                        });
                        $scope.setActiveTab.tab1 = true;
                    }
                }, function(resp) {
                    // handle error
                }, function (evt) {
                    var percent = parseInt(100.0 * evt.loaded / evt.total);
                    $scope.percentageupload = percent;
                    console.log('progress: ' + percent + '% file :' + evt.config.data.import.name);
                    if (percent == 100) {
                        $scope.fileuploadingProgressing = false;
                    }
                }).then(function (data) {
                    if (!$scope.setActiveTab.tab2) {
                        return;
                    }
                    if ($scope.isVcardFile == true) {
                        $scope.setActiveTab.tab3 = true;
                    } else {
                        getLoadedRecords();
                    }
                }).catch(function (resp, error) {
                    $scope.setActiveTab.tab1 = true;
                    toasty.error({
                        msg: 'api not working'
                    });
                });
            }
        };

        $scope.$watch('pagelimit.numberOfRecords', function (value) {
            if (uploadingFileTransactionID) {
                getLoadedRecords();
            }
           
        });

        function getLoadedRecords() {
            $(".loading").css("display", "block");
            var fetchContactsURL = "contacts/tmp/" + uploadingFileTransactionID + "?" + 'limit=' + $scope.pagelimit.numberOfRecords + '&page=' + $scope.pageNumber;
            Contact.fetchImportedContacts(fetchContactsURL, function (response, error) {
               
                if (response.data.status) {
                    buildGridColumnsAndAssignData(response.data.data, fetchContactsURL);
                    $(".loading").css("display", "none");
                } else {
                    toasty.error({
                        msg: response.data.message
                    });
                    $scope.setActiveTab.tab1 = true;
                    $(".loading").css("display", "none");
                }
            });
        };
        
        $scope.onSelectRow = function (scope, status, id) {

            if (status) {
                if (setActiveInactive.InactiveContact_id) {
                    var index = setActiveInactive.InactiveContact_id.indexOf(id);
                    setActiveInactive.InactiveContact_id.splice(index, 1);
                }

                if (!setActiveInactive.ActiveContact_id) {
                    setActiveInactive.ActiveContact_id = [];
                }
                setActiveInactive.ActiveContact_id.push(id);
            } else {
                if (setActiveInactive.ActiveContact_id) {
                    var index = setActiveInactive.ActiveContact_id.indexOf(id);
                    setActiveInactive.ActiveContact_id.splice(index, 1);
                }

                if (!setActiveInactive.InactiveContact_id) {
                    setActiveInactive.InactiveContact_id = [];
                }
                setActiveInactive.InactiveContact_id.push(id);
            }
        };

        $scope.onSelectAll = function (scope, status, ids) {
            if (status) {
                setActiveInactive.InactiveContact_id = [];
                setActiveInactive.ActiveContact_id = ids;
            } else {
                setActiveInactive.ActiveContact_id = [];
                setActiveInactive.InactiveContact_id = ids;
            }
        };

        function setActiveInactiveRecordStatus() {
            var url = "contacts/tmp/" + uploadingFileTransactionID;

            var setActiveInactiveRecords = {};
            setActiveInactiveRecords.contact_id = [];
            setActiveInactiveRecords.is_active = true;
            if (setActiveInactive.ActiveContact_id && setActiveInactive.ActiveContact_id.length > 0) {
                setActiveInactiveRecords.contact_id = setActiveInactive.ActiveContact_id;
                setActiveInactiveRecords.is_active = true;
                Contact.setActiveInactiveStatus(url, setActiveInactiveRecords, function (resp, error) {
                    setActiveInactive = {};
                    setActiveInactive.ActiveContact_id = [];
                    setActiveInactive.is_active = true;
                });
            }

            if (setActiveInactive.InactiveContact_id && setActiveInactive.InactiveContact_id.length > 0) {
                setActiveInactiveRecords.contact_id = setActiveInactive.InactiveContact_id;
                setActiveInactiveRecords.is_active = false;
                Contact.setActiveInactiveStatus(url, setActiveInactiveRecords, function (resp, error) {
                    setActiveInactive = {};
                    setActiveInactive.InactiveContact_id = [];
                    setActiveInactive.is_active = false;
                });
            }

        }

        function loadColumnMapping() {
            var url = "imports/template";
            Contact.generalGet(url, function (response, err) {
                $scope.chooseMappingCSVFromDB = response.data.data;
                $scope.selectedCsvMapping = $scope.chooseMappingCSVFromDB[0];
                angular.forEach(response.data.data, function (value, key) {
                    if (value.is_default == true) {
                        $scope.filedMappingData.dbColumnNames = value.mapper;
                    }
                })
            });
        };

        function buildGridColumnsAndAssignData(dataToBindGrid, fetchContactsURL) {
            $scope.loadingFile = true;
            $scope.pages = dataToBindGrid.pages;
            $scope.page = dataToBindGrid.page;
            $scope.total = dataToBindGrid.total;


            $scope.paginationDetailsMerge = $scope.page + 1 + "/" + $scope.pages;
           
            var tocount = ($scope.page + 1) * $scope.pagelimit.numberOfRecords;
            var fromcount = $scope.page == 0 ? 1 : tocount - $scope.pagelimit.numberOfRecords;
            tocount = tocount > $scope.total ? $scope.total : tocount;

            $scope.paginationDisplayItemMerge = fromcount + " - " + tocount;


            if ($scope.pages == $scope.page) {
                var pagenum = $scope.page;
            } else {
                var pagenum = $scope.page + 1;
            }
            
            $scope.paginationDetails = pagenum + '/' + $scope.pages;

            if (!$scope.gridCreated) {
                $scope.gridCreated = true;
                var columnName = [];
                var columnModel = [];
                var modelObj = {};
                var colForColumnMapping = [];
                var objForColMapping = {};

                modelObj.name = "_id";
                modelObj.index = "_id";
                modelObj.hidden = true;
                columnModel.push(modelObj);
                                
                columnName.push('');

                angular.forEach(dataToBindGrid.data[0].tmp_data, function (value, key) {
                    modelObj = {};
                    objForColMapping = {};
                    columnName.push(value.label);
                    modelObj.name = value.label;
                    modelObj.width = 150;
                    modelObj.sortable = false;
                    modelObj.fixed = true;
                    modelObj.index = value.label;
                    columnModel.push(modelObj);

                    objForColMapping.name = value.label;
                    objForColMapping.value = "";
                    colForColumnMapping.push(objForColMapping);
                });
                $scope.filedMappingData.columnNames = colForColumnMapping;
                $scope.configForDynamicGrid = {
                    ajaxGridOptions: { contentType: "application/json", cache: false },
                    id: '_id',
                    datatype: 'local',
                    height: 236,
                    width: 750,
                    colNames: columnName,
                    colModel: columnModel,
                    scope: $scope,
                    multiselect: true,
                };
            }
            var tempGridData = [];
            angular.forEach(dataToBindGrid.data, function (value, key) {
                var dataRowObj = {};
                angular.forEach(value.tmp_data, function (valuePair, key) {
                    dataRowObj[valuePair.label] = valuePair.value;
                });
                dataRowObj['_id'] = value._id;
                dataRowObj['is_active'] = value.is_active;
                tempGridData.push(dataRowObj);
            });

            if ($scope.chooseMappingCSVFromDB.length == 0) {
                var url = "imports/template";
                Contact.generalGet(url, function (response, err) {
                    $scope.chooseMappingCSVFromDB = response.data.data;
                    $scope.selectedCsvMapping = $scope.chooseMappingCSVFromDB[0];
                    angular.forEach(response.data.data, function (value, key) {
                        if (value.is_default == true) {
                            $scope.filedMappingData.dbColumnNames = value.mapper;
                        }
                    })

                    //when mapper not present - import first row
                    angular.forEach($scope.chooseMappingCSVFromDB[0].mapper, function (mapvalue, mapkey) {
                        angular.forEach($scope.filedMappingData.columnNames, function (displayValue, displayKey) {
                            var selectedValue = {};
                            selectedValue.name = "Save to Comment";
                            selectedValue.value = "";
                            displayValue.value = selectedValue;
                        });
                    });

                    angular.forEach($scope.chooseMappingCSVFromDB[0].mapper, function (mapvalue, mapkey) {
                        angular.forEach($scope.filedMappingData.columnNames, function (displayValue, displayKey) {
                           if (displayValue.name == mapvalue.map_name) {
                                var selectedValue = {};
                                selectedValue.name = mapvalue.display_name;
                                selectedValue.value = mapvalue.field_value;
                                displayValue.value = selectedValue;
                            }
                        });
                    });
                });
            } else {
                //when mapper not present - import first row
                angular.forEach($scope.chooseMappingCSVFromDB[0].mapper, function (mapvalue, mapkey) {
                    angular.forEach($scope.filedMappingData.columnNames, function (displayValue, displayKey) {
                        var selectedValue = {};
                        selectedValue.name = "Save to Comment";
                        selectedValue.value = "";
                        displayValue.value = selectedValue;
                    });
                });

                angular.forEach($scope.chooseMappingCSVFromDB[0].mapper, function (mapvalue, mapkey) {
                    angular.forEach($scope.filedMappingData.columnNames, function (displayValue, displayKey) {
                        if (displayValue.name == mapvalue.map_name) {
                            var selectedValue = {};
                            selectedValue.name = mapvalue.display_name;
                            selectedValue.value = mapvalue.field_value;
                            displayValue.value = selectedValue;
                        }
                    });
                });
            }
            $scope.dataToBindGrid.data = tempGridData;
            $scope.loadingFile = false;
        };

        $scope.importOnFinish = function () {
            if ($scope.finishtab.isAutoImportContact == true) {
                Preview.import(uploadingFileTransactionID, function (response, err) {
                    ngDialog.close();
                });
            } else {
                ngDialog.close();
            }
        };
    }]);
})();

'use strict';

app.controller('LoginCtrl', ['$scope', '$filter', '$rootScope', 'User', '$location', '$cookies', 'SID', 'ngDialog', 'toasty', 'BackgroundTask', '$window',
    function ($scope, $filter, $rootScope, User, $location, $cookies, SID, ngDialog, toasty, BackgroundTask, $window) {
        $scope.is_error = false;
        $scope.error_message = "";
        $scope.company_name = config.COMPANY_NAME;
        $scope.version = config.VERSION;
        $scope.user = {};
        $scope.$parent.is_login_page = true;
        $rootScope.userDetails = {};
        $scope.ask_security_code = false;
        $scope.verify_another_way = 1;
        $scope.security_question = '';
        $scope.$parent.boolShowAddContact = true;
        $scope.title_text = $filter('translate')('MY_CONTACTS');
        
        $scope.doLogin = function () {
            if ($scope.user.username != undefined && $scope.user.password != undefined) {
                if (!$scope.ask_security_code) {
                    $scope.user_password = $scope.user.password;
                    $scope.user.password = SID.ezEncode($scope.user.password);
                }
                
                User.authenticate($scope.user, function (response, err) {
                    if (response.data.status == true && response.data.data.need_2sv == '1') {
                        $scope.error_message = '';
                        $scope.ask_security_code = true;
                        $scope.title_text = $filter('translate')('2_STEP_VERIFICATION');
                    } else {
                        if (response.data.status == true && response.data.data.authPassed == 1) {
                            $scope.$parent.setUserDetails(response.data.data, function(state){
                                if(state){
                                    $scope.$parent.getUpdatedNasConfig(true, function(){
                                        if ($scope.user.secure_login) {
                                            var nasConfig = $cookies.get('NAS_Details') ? JSON.parse($cookies.get('NAS_Details')) : null;
                                            if(nasConfig && nasConfig.HTTPS){
                                                var secure_url = 'https://'+$window.location.hostname+':'+nasConfig.HTTPS+'/'+config.APP_NAME+'/#/contacts';
                                                $window.location.href = secure_url;
                                            } else 
                                                $location.path('/contacts');
                                        } else {
                                            $location.path('/contacts');                                    
                                        }
                                    });
                                } else {
                                    $scope.$parent.is_login_page = true;
                                    $scope.error_message = $filter('translate')('LOGIN_WARNING');
                                }
                            });
                        } else {
                            $scope.$parent.is_login_page = true;
                            $scope.error_message = $filter('translate')('LOGIN_WARNING');
                        }
                    }
                });
            } else {
                $scope.error_message = $filter('translate')('PROVIDE_CREDENTIALS');
            }
        };
        
        $scope.goBack = function(){
            $scope.verify_another_way = 1;
        };
        $scope.verifyAnotherWay = function () {
            $('.verify-another-way').hide();
            User.authenticate($scope.user, function (response, err) {
                if (response.data.status == true) {
                    if (response.data.data.lost_phone == 1) {
                        $scope.user.send_mail = 1;
                        $scope.verify_another_way = 1;
                        ngDialog.openConfirm({
                            template:
                                '<p>'+$filter('translate')('SEND_MAIL_CONFIRM')+'</p>' +
                                '<footer><div class="confirm-buttons">' +
                                '<button type="button" class="mycontacts-btn" ng-click="confirm(1)">' + $filter('translate')('CONFIRM') + '</button>&nbsp;&nbsp;&nbsp;' +
                                '<button type="button" class="cancel" ng-click="closeThisDialog(0)">' + $filter('translate')('CANCEL') +
                                '</button></div></footer>',

                            plain: true,
                            className: 'ngdialog-theme-default'
                        }).then(function (value) {
                            User.authenticate($scope.user, function (response, err) {
                                if (response.data.status) {
                                    delete $scope.user.send_mail;
                                    toasty.success({                    
                                        msg: $filter('translate')('EMAIL_SENT')
                                    });                                    
                                }
                                
                            });
                        });
                    } else if (response.data.data.lost_phone == 2) {
                        $scope.user.get_question = 1;
                
                        User.authenticate($scope.user, function (response, err) {
                            delete $scope.user.get_question;
                            $scope.verify_another_way = 2;
                            switch (response.data.data.security_question_no) {
                                case '1':
                                    $scope.security_question = $filter('translate')('WHAT_IS_PET_NAME');
                                    break;
                                case '2':
                                    $scope.security_question = $filter('translate')('WHAT_IS_FAVORITE_SPORT');
                                    break;
                                case '3':
                                    $scope.security_question = $filter('translate')('WHAT_IS_FAVORITE_COLOR');
                                    break;
                                case '4':
                                    $scope.security_question = response.data.data.security_question_text;
                                    break;
                            }
                        });
                    }
                }
                if(!$scope.$$phase) $scope.$apply();
            });
        };
    }]);
'use strict';

var showing = false;
app.controller('MainCtrl', ['$scope', '$translate', 'Contact', '$log', '$cookies', 'User', '$location', '$rootScope', 'Group', 'ngDialog', 'Private', 'SID', '$http', 'BackgroundTask', 'TaskNotification', '$window', '$filter', 'toasty', '$document','CGI',
    function ($scope, $translate, Contact, $log, $cookies, User, $location, $rootScope, Group, ngDialog, Private, SID, $http, BackgroundTask, TaskNotification, $window, $filter, toasty, $document,CGI) {
        $scope.nasDetails = "";
        if($cookies.get('nasDetails')){
            $scope.nasDetails = JSON.parse($cookies.get('nasDetails'));
        } else {
            CGI.getNasInfo(function(res, err){
                if(res.QDocRoot){
                    var nasDetails = {
                        nas_name: res.QDocRoot.hostname,
                        hostname: window.location.hostname
                    }
                    $cookies.put('nasDetails', JSON.stringify(nasDetails));
                    $scope.nasDetails = nasDetails;
                    if (!$scope.$$phase) $scope.$apply();
                }
            });
        }        
        $scope.show_connection_error = false;
        $scope.socket_url = config.SOCKET_URL;
        $scope.pic_url = config.PIC_URL;
        $scope.api_url = config.API_URL;
        $scope.authorization = 'bearer '+ $cookies.get('accessToken');
        $rootScope.isRestoreDialogOpen = false;
        $scope.boolShowAddContact = true;
        $scope.translationText = {};
        $scope.NAS_INFO = {};
        $scope.searchCriteriaSettings = {
            smartButtonMaxItems: 2,
            buttonClasses: 'search-criteria-btn'
        };
        $scope.supportedLanguages = [
            {lang_code: "en-US", nas_lang:"ENG", lang_name: "English"},
            {lang_code: "zh_TW", nas_lang:"TCH", lang_name: "繁體中文"},
            {lang_code: "zh_CH", nas_lang:"SCH", lang_name: "简体中文"},
            {lang_code: "cs_CZ", nas_lang:"CZE", lang_name: "Czech"},
            {lang_code: "nl_NL", nas_lang:"DUT", lang_name: "Nederlands"},
            {lang_code: "es_ES", nas_lang:"SPA", lang_name: "Español"},
            {lang_code: "sv_SE", nas_lang:"SWE", lang_name: "Svenska"},
            {lang_code: "tr_TR", nas_lang:"TUR", lang_name: "Turk dili"},
            {lang_code: "fr_FR", nas_lang:"FRE", lang_name: "Français"},
            {lang_code: "it_IT", nas_lang:"ITA", lang_name: "Italiano"},
            {lang_code: "pl_PL", nas_lang:"POL", lang_name: "Polski"},
            {lang_code: "da_DA", nas_lang:"DAN", lang_name: "Dansk"},
            {lang_code: "su_SU", nas_lang:"FIN", lang_name: "Suomi"},
            {lang_code: "de_DE", nas_lang:"GER", lang_name: "Deutsch"},
            {lang_code: "el_GR", nas_lang:"GRK", lang_name: "Ελληνικά"},
            {lang_code: "hr_HR", nas_lang:"HUN", lang_name: "Magyar"},
            {lang_code: "jp_JP", nas_lang:"JPN", lang_name: "日本語"},
            {lang_code: "kr_KR", nas_lang:"KOR", lang_name: "한글"},
            {lang_code: "nw_NW", nas_lang:"NOR", lang_name: "Norsk"},
            {lang_code: "pt_PT", nas_lang:"POR", lang_name: "Português"},
            {lang_code: "ro_RO", nas_lang:"ROM", lang_name: "Română"},
            {lang_code: "ru_RU", nas_lang:"RUS", lang_name: "Русский"},
            {lang_code: "th_TH", nas_lang:"THA", lang_name: "ไทย"}
        ];
        $scope.notifications = {};
        $scope.selectedContacts = [];
        
        $scope.menu = {};
        $scope.tasks = [];

        $scope.showSearchResult = false;
        $scope.showCreateGroup = false;
        $scope.forgotPassword = false;
        
        if ($rootScope.userDetails === undefined) {
            if ($cookies.get('user')) {
                $rootScope.userDetails = JSON.parse($cookies.get('user'));
            }
        }
        $scope.searchCriteriaModel = [];
        $scope.searchCriteria = [];

        $scope.$on('configChanged', function (event, Data) {
            User.setConfiguration($scope.userConfiguration, function (response, err) {
            });
        });

        $scope.$on('$viewContentLoaded', function() {
            $scope.searchString = '';
            $scope.translationText = { selectionOf: '/', checkAll: $filter('translate')('CHECK_ALL'), uncheckAll: $filter('translate')('UNCHECK_ALL') };
            $scope.searchCriteria = [
                {id: "name", label: $filter('translate')('NAME'), checked: false},
                {id: "emails", label: $filter('translate')('EMAIL'), checked: false},
                {id: "phones", label: $filter('translate')('PHONE'), checked: false},
                {id: "company_name", label: $filter('translate')('COMPANY'), checked: false},
                {id: "im", label: $filter('translate')('IM'), checked: false},
                {id: "addresses", label: $filter('translate')('ADDRESS'), checked: false},
                {id: "webpage", label: $filter('translate')('WEBPAGE'), checked: false},
                {id: "note", label: $filter('translate')('NOTE'), checked: false}
            ];

            if ($scope.searchCriteriaModel.length<1) {
                $scope.searchCriteriaModel = [
                    {id: "name", label: $filter('translate')('NAME'), checked: true},
                    {id: "emails", label: $filter('translate')('EMAIL'), checked: true}
                ];
            }
        });

        $rootScope.$on('restore_halted', function(event, response){         
            if($rootScope.isRestoreDialogOpen == false) {
                $rootScope.isRestoreDialogOpen = true;
                var snapshotId = response.data.data.snapshot_id,
                    restoreId = response.data.data._id;

                ngDialog.open({
                    template:'<div id="restore-confirmation">'
                        +'<div class="info-block">' 
                            +'<div>'
                                + '<span id="info-icon">IMG</span>'
                            +'</div>'
                            +'<div class="content">'
                                +'<div class=""><p>'+$filter('translate')('RESUME_RESTORE_MESSAGE_1')+'<p></div>'
                                +'<div class="info-data"><p>'+$filter('translate')('RESUME_RESTORE_MESSAGE_2')+'<p></div>'
                                +'<div class="create-snapshot">'
                                    +'<input type="checkbox"  ng-model="create_snapshot" ng-init="create_snapshot=true">'
                                    + $filter('translate')('AUTOMATIC_SNAPSHOT')
                                +'</div>'
                            +'</div>'                         
                        +'</div>'
                        +'<div class="confirm-buttons">'
                            + '<button class="apply" ng-click="restoreSnapshot(\''+snapshotId+'\', \''+restoreId+'\')">'+$filter('translate')('NEXT')+'</button>'
                        +'</div>'
                    +'</div>',
                    controller: 'SnapshotManagerCtrl',
                    className: 'ngdialog-theme-default custom-width-670',
                    closeByDocument: false,
                    plain: true,
                    closeByEscape: false,
                    showClose: false
                });    
            }            
        });
        
        $rootScope.$on('ngDialog.opened', function (e, $dialog) {
            $scope.makeDraggable();
        });

        $scope.getUserConfiguration = function () {
            User.getConfiguration(function (response, err) {
                $scope.userConfiguration = {
                    tutorial_displayed: false,
                    grid_column_selected: ['phones', 'company_name', 'im', 'sources', 'events'],
                    grid_config: {pagination:100},
                    language: 'en-US'
                };

                if (response.data.status_code == 10000) {
                    User.setConfiguration($scope.userConfiguration, function (response, err) {
                    });
                } else if (response.data.status) {
                    $scope.userConfiguration = response.data.data;
                    if ($scope.userConfiguration != undefined && $scope.userConfiguration.language) {
                        $translate.use($scope.userConfiguration.language);
                    }else if ($cookies.get('language_code')) {
                        $translate.use($cookies.get('language_code'));
                    } else if ($cookies.get('nas_lang')) {
                        var nas_lang = $cookies.get('nas_lang');
                        _.filter($scope.supportedLanguages, function (lang) {
                            if (lang.nas_lang == nas_lang) {
                                $cookies.put('language_code', lang.lang_code);
                                $translate.use(lang.lang_code);
                            }
                        });
                    } else {
                        $cookies.put('language_code', 'en-US');
                        $translate.use($cookies.get('language_code'));                        
                    }
                } else {
                    $cookies.put('language_code', 'en-US');
                    $translate.use($cookies.get('language_code'));
                }
            });
        };

        $scope.logout = function () {
            User.logout(function(response, err){
                if (response.data.data.status) {
                    $rootScope.userDetails = {};
                    $cookies.remove('user');
                    $cookies.remove('accessToken');
                    $cookies.remove('mcsqtoken');
                    $cookies.put('loggedout', true);
                    $location.path('/login');
                    $window.location.reload();
                }
            });
        };

        $scope.initSocket = function () {
            BackgroundTask = BackgroundTask.connect();
            BackgroundTask.on('task:error', function(data) {
            });
            
            BackgroundTask.on('disconnect', function() {
                if (!$scope.show_connection_error) {
                    $scope.show_connection_error = true;
                    if (!$scope.$$phase) $scope.$apply();
                    $scope.showNetworkError();
                }
            });

            BackgroundTask.on('connect_error', function(data) {
                if (!$scope.show_connection_error) {
                    $scope.show_connection_error = true;
                    if (!$scope.$$phase) $scope.$apply();
                    $scope.showNetworkError();
                }
            });

            BackgroundTask.on('connect', function() {
                if ($scope.show_connection_error) {
                    $scope.show_connection_error = false;
                    if (!$scope.$$phase) $scope.$apply();
                    $window.location.reload();
                }
            });

            BackgroundTask.on('task:progress', function(data) {
                var found = _.find($scope.tasks, function(task){
                    var status = false;
                    if(task._id == data._id){
                        status = true;
                        task.progress = data.progress.replace('%','');                    
                    }
                    return status;
                });
                if(data.progress == '100' || data.progress == '100%'){
                    $scope.tasks = _.filter($scope.tasks, function(task){
                        TaskNotification.getNotifications('read=false', function(response, err){
                            $scope.notifications = response.data.data;
                        });
                        if ( $( "#contact-grid" ).length ) {
                            $('#contact-grid').trigger('reloadGrid');
                        }
                        $scope.load_groups();
                        return task._id !== data._id;
                    });
                }
                if(typeof found == 'undefined' && data.progress != '100%'){
                    $scope.tasks.push(data);
                }
                if(!$scope.$$phase) $scope.$apply();
            });
            BackgroundTask.on('task:list', function(data) {
                $scope.tasks = data;
            });
            
            $scope.getNotifications();
        };
        
        $scope.showPreview = function (preview_id) {
            ngDialog.open({
                template: 'views/partials/show-preview.html',
                controller: 'PreviewCtrl',
                closeByDocument: false,
                className: 'ngdialog-theme-default custom-width-750',
                data: {preview_id: preview_id}
            });
        };
        
        $scope.changeLanguage = function (key) {
            $cookies.put('language_code', key);
            $translate.use(key);
            $scope.updateLanguageConfiguration(key);
            $window.location.reload();
        };

        $scope.updateLanguageConfiguration = function (lang_code) {
            $scope.userConfiguration.language = lang_code;
            $scope.$emit('configChanged', $scope.userConfiguration);
        };
        
        $scope.resetMenu = function () {
            $scope.menu.all = false;
            $scope.menu.frequently_used = false;
            $scope.menu.favorite = false;
            $scope.menu.private = false;
            $scope.menu.group = false;
            $scope.menu.more = false;
            $scope.menu.trash = false;
        };        
        
        $scope.clearAllNotifications = function () {
            var params = {
                action: "read",
                apply_all: true
            };
            TaskNotification.updateNotifications(params, function(response, err){
                $scope.getNotifications();
            });
        };

        $scope.getNotifications = function () {
            TaskNotification.getNotifications('read=false', function(response, err){
                $scope.notifications = response.data.data;
                $scope.authorization = 'bearer '+$cookies.get('accessToken');
            });
        };
        
        $scope.showNetworkError = function() {
            if (ngDialog.getOpenDialogs().length === 0) {
                ngDialog.open({
                    name: 'networkError',
                    template: 'views/partials/network-error.html',
                    controller: 'MainCtrl',
                    className: 'ngdialog-theme-default custom-width-550',
                    closeByDocument: false
                });
            }
        };

        $scope.showContacts = function (type) {
            $scope.resetMenu();
            switch (type) {
                case 'favorite':
                    $scope.menu.favorite = "selected";
                    break;
                case 'private':
                    $scope.menu.private = "selected";
                    break;
                case 'group':
                    $scope.menu.group = "selected";
                    break;
                case 'more':
                    $scope.menu.more = "selected";
                    break;
                case 'trash':
                    $scope.menu.trash = "selected";
                    break;
                case 'all':
                    $scope.menu.all = "selected";
                default:

            }
            if (type != 'group') {
                $('.sub-menu').removeClass('selected');
            }
        };
        
        $scope.openSnapshotManager = function() {
            ngDialog.open({
                template: 'views/snapshot-manager.html',
                controller: 'SnapshotManagerCtrl',
                className: 'ngdialog-theme-default snapshot-restore-dialog',
                closeByDocument: false
            });
        };

        $scope.openPrivate = function () {
            if($location.path().indexOf('contacts/private') > -1)
                return;
            Private.getSecurityQuestionSetByUser(function (response, err) {
                if (response.data.data && response.data.data.data && response.data.data.data != '') {
                    ngDialog.open({
                        template: 'views/high-security-password.html',
                        controller: 'MainCtrl',
                        className: 'ngdialog-theme-default custom-width-550',
                        closeByDocument: false
                    });
                } else {
                    ngDialog.open({
                        template: 'views/high-security-question.html',
                        controller: 'MainCtrl',
                        className: 'ngdialog-theme-default custom-width-550',
                        closeByDocument: false
                    });
                }
            });
        };

        $scope.isUserLoggedIn = function () {
            if ($cookies.get('accessToken') != undefined) {
                var userToken = $cookies.get('accessToken');
                User.validate(function (response, err) {
                    if (response.data.status == false) {
                        $scope.is_login_page = true;
                        $location.path('/login');
                    } else {
                        $scope.is_login_page = false;
                    }
                });
            } else {
                $scope.is_login_page = true;
                $location.path('/login');
            }
        };

        $scope.redirectPath = function (type, url) {
            $scope.showContacts(type);
            $location.path(url);
        };
        
        $scope.redirectGroup = function (type, url, group_id) {
            $scope.showContacts(type);
            $location.path(url);
            $('.sub-menu').removeClass('selected');
            $('#group_menu_'+group_id).addClass('selected');
            $('.icon-ic_submenu_close_normal').addClass('icon-ic_submenu_close_active');
            $('.icon-ic_submenu_close_normal').removeClass('icon-ic_submenu_close_normal');
        };
        
        $scope.redirectMoreOptions = function (type, url, more_option) {
            $scope.showContacts(type);
            $location.path(url);
            $('.sub-menu').removeClass('selected');
            $('#'+more_option).addClass('selected');
            $('.icon-ic_submenu_close_normal').addClass('icon-ic_submenu_close_active');
            $('.icon-ic_submenu_close_normal').removeClass('icon-ic_submenu_close_normal');
        };

        $scope.openAbout = function () {
            var nasConfig = $cookies.get('NAS_Details') ? JSON.parse($cookies.get('NAS_Details')) : {};
            ngDialog.open({
                template: 'views/about.html',
                className: 'ngdialog-theme-default custom-width-360',
                closeByDocument: false,
                scope: $scope
            });
        };

        $scope.openHelp = function () {
            ngDialog.open({
                template: 'views/help.html',
                className: 'ngdialog-theme-default custom-width-900',
                closeByDocument: false
            });
        };

        $scope.openResetHighSecurityPassword = function (checkFlag, callback) {
            Private.getSecurityQuestionSetByUser(function (response, err) {
                if (response.data.data && response.data.data.data && response.data.data.data != '') {
                    if(!checkFlag){
                        ngDialog.open({
                            template: 'views/reset-high-security-password.html',
                            controller: 'MainCtrl',
                            closeByDocument: false,
                            data: response.data.data
                        });
                    }
                    if(typeof callback == 'function')
                        callback(true);
                } else {
                    ngDialog.open({
                        template: 'views/high-security-question.html',
                        controller: 'MainCtrl',
                        className: 'ngdialog-theme-default custom-width-550',
                        closeByDocument: false
                    });
                    if(typeof callback == 'function')
                        callback(false);
                }
            });
        };

        $scope.loadSecurityQuestions = function () {
            Private.getSecurityQuestion(function (response, err) {
                $scope.questionList = response.data.data;
                $scope.security = {};
            });
        };

        $scope.setSecurityPassword = function (setSecurityForm, security) {
            $scope.$broadcast('runCustomValidations');
            if (setSecurityForm.$valid) {
                var data = {};
                data.high_security_password = SID.ezEncode(security.high_security_password);
                data.security_question = security.security_question;
                data.security_answer = security.security_answer;

                if (security.custom_question != undefined && security.security_question == 'custom_question') {
                    data.security_question = security.custom_question;
                }

                Private.setHighSecurityPassword(data, function (response, err) {
                    if (response.data.status_code == 10001) {
                        $scope.closeThisDialog('success');
                        toasty.success({                    
                            msg: $filter('translate')('HIGH_SECURITY_PASSWORD_SET_SUCCESS')
                        });

                    } else if (response.data.status_code == 10008) {
                        toasty.error({                    
                            msg: $filter('translate')('HIGH_SECURITY_PASSWORD_EMPTY_WARNING')
                        });                            
                    }
                });
            }
        };

        $scope.verifyPassword = function (verifyPasswordForm, security) {
            $scope.$broadcast('runCustomValidations');
            if (verifyPasswordForm.$valid) {
                security.high_security_password = SID.ezEncode(security.high_security_password);
                Private.getSecondaryToken(security, function (response, err) {
                    if (response.data.status) {
                        var secondary_token = response.data.data.secondary_token;
                        $http.defaults.headers.common['Highsecurity'] = 'Bearer ' + secondary_token;
                        $cookies.put('secondaryToken', 'Bearer ' + secondary_token);

                        ngDialog.close();
                        $location.path("contacts/private");
                    } else {
                        security.high_security_password = "";
                        toasty.error({                    
                            msg: $filter('translate')('WRONG_HIGH_SECURITY_PASSWORD')
                        });                        
                    }
                });
            }
        };

        $scope.showExportOption = function() {
            ngDialog.open({
                template: 'views/export.html',
                controller: 'ExportCtrl',
                scope: $scope,
                className: 'ngdialog-theme-default custom-width-550',
                closeByDocument: false
            });
        };

        $scope.resetHighSecurityPassword = function (resetHighSecurityPasswordForm, security) {
            $scope.$broadcast('runCustomValidations');
            if (resetHighSecurityPasswordForm.$valid) {
                var data = {};
                if (security.old_high_security_password != undefined) {
                    data.old_high_security_password = SID.ezEncode(security.old_high_security_password);
                } else {
                    data.security_question = security.security_question;
                    data.security_answer = security.security_answer;
                }
                data.new_high_security_password = SID.ezEncode(security.new_high_security_password);

                Private.resetHighSecurityPassword(data, function (response, err) {
                    if (response.data.status_code == 10001) {
                        ngDialog.close();
                        toasty.success({                    
                            msg: $filter('translate')('HIGH_SECURITY_PASSWORD_CHANGED_SUCCESS')
                        });                            
                    } else {
                        toasty.error({                    
                            msg: $filter('translate')('WRONG_HIGH_SECURITY_PASSWORD')
                        });                             
                    }
                });
            }
        };

        $rootScope.$on('load_groups', function (event) {
            $scope.load_groups();
        });

        $scope.load_groups = function () {
            Group.getGroups('full=true', function (response) {
                if (response.data.status) {
                    $scope.groups = response.data.data.data;
                    $scope.system_groups = {};
                    _.filter(response.data.data.system_groups, function(group){
                        switch (group.name) {
                            case 'ALL_CONTACTS':
                                $scope.system_groups.all_contacts = group.contacts_count;
                                break;
                            case 'FREQUENTLY_USED':
                                $scope.system_groups.frequently_used = group.contacts_count;
                                break;
                            case 'FAVORITES':
                                $scope.system_groups.favorites = group.contacts_count;
                                break;
                            case 'PRIVATE':
                                $scope.system_groups.private = group.contacts_count;
                                break;
                            case 'TRASH':
                                $scope.system_groups.trash = group.contacts_count;
                                break;
                        }
                    });
                } else {
                    $scope.groups = [];
                    $scope.system_groups = {
                        all_contacts: 0,
                        frequently_used: 0,
                        favorites: 0,
                        private: 0,
                        trash: 0
                    };
                }
                $scope.show_create_contact = ($scope.system_groups.all_contacts > 0) ? false : true;
            });
        };

        $scope.doForgotPassword = function(value) {
            $scope.forgotPassword = value;
        };

        $scope.createGroup = function (group) {
            if (group && group.name != '') {
                Group.createGroup(group, function(response, err){
                    if (response.data.status) {
                        group.name = '';
                        $scope.load_groups();
                    } else {
                        if (response.data.status_code == '10050') {
                            toasty.error({                    
                                msg: $filter('translate')('ERR_GROUP_EXIST')
                            });
                        }
                    }
                });
            }
        };

        $scope.editGroup = function(group, groupId){
            var oldName = $('#group_name_span').text();
            if (group && group.name != '') {
                Group.updateGroup(groupId, group, function(response, err){
                    if (response.data.status) {
                        $scope.load_groups();
                        $('#group_name_text').val(group.name);
                        $('#group_name_span').text(group.name);
                    } else {
                        if (response.data.status_code == '10050') {
                            $('#group_name_span').text(oldName);
                            $('#group_name_text').val(oldName);
                            toasty.error({                    
                                msg: $filter('translate')('ERR_GROUP_EXIST')
                            });
                        }
                    }
                });
            } else {
                $('#group_name_text').val(oldName);
            }
        };

        $scope.deleteGroup = function(groupId){
            ngDialog.openConfirm({
                template:
                        '<p>' + $filter('translate')('CONFIRM_DELETE_GROUP') + '</p>' +
                        '<footer><div class="confirm-buttons">' +
                        '<button type="button" class="mycontacts-btn" ng-click="confirm(1)">' + $filter('translate')('CONFIRM') + '</button>&nbsp;&nbsp;&nbsp;' +
                        '<button type="button" class="cancel" ng-click="closeThisDialog(0)">' + $filter('translate')('CANCEL') +
                        '</button></div></footer>',

                plain: true,
                className: 'ngdialog-theme-default'
            }).then(function (value) {
                Group.deleteGroup(groupId, function (response, err) {
                    if (response.data.status) {
                        $scope.load_groups();
                        $location.path('/contacts');
                    }
                });
            });
        };
        
        $scope.cleanUpSearch = function (search) {
            if (search && search.s == '') {
                $('.search-result').hide();
            } else {
                $('.search-result').show();
            }
        };

        $scope.doSearch = function(search) {
            $('.search-result').show();
            var searchKeyword = encodeURIComponent(search.s);
            var params = 's='+searchKeyword;
            if ($scope.searchCriteriaModel.length > 0) {
                params = params + '&search_in_fields=';
                $scope.searchCriteriaModel.forEach(function(field){
                    if (field.id == 'name') {
                        params = params + 'fname,mname,lname,'
                    } else {
                        params = params+field.id+',';
                    }
                });
                params = params.slice(0, -1);
            }

            $scope.searchedContacts = [];
            if (search.s != '') {
                Contact.searchContacts(params, function(response, err){
                    if (response.data.data.data.length > 0) {
                        $scope.searchedContacts = response.data.data.data;
                    }
                });
            }
        };
        
        $scope.openUserManagement = function() {
            ngDialog.open({
                template: 'views/user-management.html',
                controller: 'UserManagementCtrl',
                className: 'ngdialog-theme-default custom-width-670',
                closeByDocument: false
            });
        };
        
        $scope.openEditProfile = function() {
            $scope.edit_user = true;
            
            ngDialog.open({
                template: 'views/edit-profile.html',
                controller: 'UserManagementCtrl',
                scope: $scope,
                closeByDocument: false
            });
        };
        
        $scope.closeSearch = function () {
            if ($('#search-btn').hasClass('icon-framset_search_on')) {
                $('#search-string').val('');
                $('#search-inputs').slideToggle("fast");
                $('#search-inputs').css('display', 'none');
                $('#search-btn').removeClass('icon-framset_search_on');
                $('#search-btn  ').addClass('icon-framset_search_active');
                $('#search_string').val('');
            }
        };
        
        $scope.applyFilter = function(search) {
            if ($('#search-inputs').css('display') == 'none') {
                $('#search-inputs').slideToggle("fast");
                $('#search-inputs').css('display', 'inline-block');
                $('.icon-framset_search_active').addClass('icon-framset_search_on');
                $('.icon-framset_search_active').removeClass('icon-framset_search_active');
                $('#search_string').focus();
            } else {
                if (search && search.s != '') {
                    $scope.searchString = (search!=undefined) ? search.s : '';
                    $location.path('contacts/search/'+encodeURIComponent(search.s));
                }
            }
        };

        $scope.openNASFileChooser = function (type, multiselect, folderSelect) {
            var type = (type != undefined) ? type : null;
            var multiselect = (multiselect != undefined) ? multiselect : true;
            var folderSelect = (folderSelect != undefined) ? folderSelect : false;

            ngDialog.open({
                template: 'views/partials/nas-file-chooser.html',
                controller: 'FileBrowserCtrl',
                className: 'ngdialog-theme-default custom-width-900',
                closeByDocument: false,
                data: {type: type, multiselect: multiselect, folderSelect: folderSelect}
            });
        };
        
        $scope.makeDraggable = function () {
            var startX = 0, startY = 0, x = 0, y = 0;
            var mousemove = function (event) {
                y = event.screenY - startY;
                x = event.screenX - startX;
                $('.ngdialog-content').css({
                    top: y + 'px',
                    left:  x + 'px'
                });
            };

            var mouseup = function () {
                $document.off('mousemove', mousemove);
                $document.off('mouseup', mouseup);
                $('.ngdialog-content').css('opacity', '1');
            };
            
            $('.ngdialog-content header').on('mousedown', function(event) {
                event.preventDefault();
                startX = event.screenX - x;
                startY = event.screenY - y;
                $('.ngdialog-content').css('opacity', '0.25');
                $document.on('mousemove', mousemove);
                $document.on('mouseup', mouseup);
            });
        };
        
        $scope.scrollToTextHelpPage = function (idToScroll, idToAddClass) {
            var container = document.getElementById('helpcontent');
            var rowToScrollTo = document.getElementById(idToScroll);
            container.scrollTop = rowToScrollTo.offsetTop;

            $('#option_name_p1_overview').removeClass("selected");
            $('#option_name_sys_requir').removeClass("selected");
            $('#option_name_import_contact').removeClass("selected");
            $('#option_name_export').removeClass("selected");
            $('#option_name_manage').removeClass("selected");
            $('#option_name_sendmail').removeClass("selected");
            $('#' + idToAddClass).addClass("selected");
        };
        
        $scope.setUserDetails = function(userData, callback){
            $cookies.put('accessToken', userData.token);
            User.getLoggedInUserDetails(function(response, err){
                if(response.data && response.data.status){
                    var user_details = response.data.data;
                    $rootScope.userDetails = {};
                    $rootScope.userDetails.name = (user_details.fname || '') + ' ' + (user_details.lname || '');
                    $rootScope.userDetails.username = user_details.username || '';
                    $rootScope.userDetails.role = user_details.role || 'user';
                    $rootScope.userDetails.is_nas_user = user_details.is_nas_user || false;
                    $rootScope.userDetails.is_tutorial_displayed = user_details.is_tutorial_displayed || false;
                    $rootScope.userDetails.sid = userData.sid || '';

                    $cookies.put('user', angular.toJson($rootScope.userDetails));

                    $scope.is_login_page = false;

                    $scope.qtoken = {qtoken: response.data.data.qtoken, username: response.data.data.username};
                    $cookies.put('mcsqtoken', angular.toJson($scope.qtoken));
                    $scope.authorization = 'bearer '+ $cookies.get('accessToken');
                    $scope.initSocket();
                    $scope.getUserConfiguration();
                    checkTutorialDiscplayed();
                    callback(true);
                } else {
                    callback(false);
                }
            });
        };

        $scope.getUpdatedNasConfig = function(forceUpdate, callback){
            var nasConfig = $scope.NAS_INFO = $cookies.get('NAS_Details') ? JSON.parse($cookies.get('NAS_Details')) : "";
            if(!nasConfig || forceUpdate){
                User.getNASDetails(function (response, err) {
                    if(response.data && response.data.status){
                        $cookies.put('NAS_Details', angular.toJson(response.data.data));
                        $scope.NAS_INFO = response.data.data;
                        if (!$scope.$$phase) $scope.$apply();
                        callback(true);
                    } else {
                        callback(false);    
                    }                    
                });
            } else 
                callback(true);
        };

        var checkTutorialDiscplayed = function(){
            if (!$rootScope.userDetails.is_tutorial_displayed) {
                ngDialog.open({
                    template: 'views/partials/introduction-tutorial.html',
                    className: 'ngdialog-theme-default custom-width-900',
                    closeByDocument: false,
                    scope: $scope
                });
                User.setTutorialDisplay({is_tutorial_displayed:true}, function(response, err){
                    if (response.data.status) {
                        $rootScope.userDetails.is_tutorial_displayed = true;
                        $cookies.put('user', angular.toJson($rootScope.userDetails));
                    }
                });
            }
        };

        var init = function(){
            $scope.load_groups();
            $scope.showContacts('all');
            $scope.getUpdatedNasConfig(false, function(){});            
        }; 
        
        var checkUserSession = function(callback){
            if ($cookies.get('user') && $cookies.get('accessToken')) {
                $scope.is_login_page = false;                
                $rootScope.userDetails = JSON.parse($cookies.get('user'));
                $scope.authorization = 'bearer '+ $cookies.get('accessToken');
                $scope.qtoken = $cookies.get('mcsqtoken') ? JSON.parse($cookies.get('mcsqtoken')) : {};
                $scope.initSocket();
                $scope.getUserConfiguration();
                checkTutorialDiscplayed();
                callback(true);
            } else {
                var qtoken = ($cookies.get('mcsqtoken')) ? JSON.parse($cookies.get('mcsqtoken')) : '';
                var nas_sid = $cookies.get('NAS_SID');
                var nas_user = $cookies.get('NAS_USER');
                var loggedout = $cookies.get('loggedout');

                if (qtoken && !loggedout) {
                    User.authenticate({username: qtoken.username,  qtoken: qtoken.qtoken, keep_me_signedin: true}, function (response, err) {
                        if (response.data.status == true && response.data.data.authPassed == 1) {
                            $cookies.remove('loggedout');
                            $scope.is_login_page = false;
                            $scope.setUserDetails(response.data.data);
                            callback(true);
                        } else
                            callback(false);
                    });
                } else if (nas_sid && nas_user && !loggedout) {
                    User.authenticate({username: nas_user, sid: nas_sid}, function (response, err) {
                        if (response.data.status == true && response.data.data.authPassed == 1) {
                            $scope.is_login_page = false;
                            $scope.setUserDetails(response.data.data);
                            callback(true);
                        } else 
                            callback(false);
                    });
                } else
                    callback(false);
            }
        };

        checkUserSession(function(status, loadSocket){
            if(status){
                init();
                var path = $location.path();
                if(path =='' || path == '/' || path == '/#' || path.indexOf('login') != -1)
                    $location.path('/contacts');
            } else {
                $location.path('/login');
            }            
        });

        $scope.redirectToContactPageOrNot = function () {
            var path = $location.$$path;
            if (path != "/sync")
                $location.path('/contacts');
            ngDialog.close();
        };
    }]);
(function (){
    'use strict';

    app.controller('PreviewCtrl', ['$scope', '$translate', '$filter','$cookies','$location', 'Preview', function ($scope, $translate, $filter,$cookies,$location, Preview) {
        $scope.config = {
            datatype: 'json',
            ajaxGridOptions: {contentType: "application/json", cache: false},
            url: config.API_URL + 'contacts/tmp/preview/' + $scope.ngDialogData.preview_id,
            loadBeforeSend: function (jqXHR) {
                jqXHR.setRequestHeader('Authorization', 'bearer ' + $cookies.get('accessToken'));
            },
            userData: $scope.previewData,
            id: '_id',
            colNames: [
                'id',
                $filter('translate')('FIRST_NAME'),
                $filter('translate')('MIDDLE_NAME'),
                $filter('translate')('LAST_NAME'),
                $filter('translate')('NICKNAME'),
                $filter('translate')('TITLE'),
                $filter('translate')('EMAIL_HOME'),
                $filter('translate')('EMAIL_OFFICE'),
                $filter('translate')('EMAIL_OTHER'),
                $filter('translate')('PHONE_HOME'),
                $filter('translate')('PHONE_OFFICE'),
                $filter('translate')('PHONE_MOBILE'),
                $filter('translate')('PHONE_MAIN'),
                $filter('translate')('PHONE_HOME_FAX'),
                $filter('translate')('PHONE_BUSINESS_FAX'),
                $filter('translate')('PHONE_OTHER'),
                $filter('translate')('COMPANY'),
                $filter('translate')('ADDRESS_HOME'),
                $filter('translate')('ADDRESS_OFFICE'),
                $filter('translate')('WEBPAGE'),
                $filter('translate')('IM_SKYPE'),
                $filter('translate')('IM_FACEBOOK'),
                $filter('translate')('IM_QQ'),
                $filter('translate')('IM_LINE'),
                $filter('translate')('IM_WECHAT'),
                $filter('translate')('IM_YAHOO'),
                $filter('translate')('IM_GTALK'),
                $filter('translate')('IM_CUSTOM'),
                $filter('translate')('DATE_BIRTHDAY'),
                $filter('translate')('DATE_ANNIVERSARY'),
                $filter('translate')('DATE_CUSTOM'),
                $filter('translate')('NOTE'),
                $filter('translate')('CUSTOM_FIELD')
            ],
            colModel: [
                {name: '_id', index: '_id', hidden: true, resizable: false},
                {name: 'fname', index: 'fname', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    if (cellvalue) {
                        return '<div class="contact-grid-column-padding">' + _.escape(cellvalue) + '</div>';
                    } else {
                        return "";
                    }
                }
                },
                {name: 'mname', index: 'mname', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    if (cellvalue) {
                        return '<div class="contact-grid-column-padding">' + _.escape(cellvalue) + '</div>';
                    } else {
                        return "";
                    }
                }
                },
                {name: 'lname', index: 'lname', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    if (cellvalue) {
                        return '<div class="contact-grid-column-padding">' + _.escape(cellvalue) + '</div>';
                    } else {
                        return "";
                    }
                }
                },
                {name: 'nickname', index: 'nickname', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    if (cellvalue) {
                        return '<div class="contact-grid-column-padding">' + _.escape(cellvalue) + '</div>';
                    } else {
                        return "";
                    }
                }
                },
                {name: 'title', index: 'title', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    if (cellvalue) {
                        return '<div class="contact-grid-column-padding">' + _.escape(cellvalue) + '</div>';
                    } else {
                        return "";
                    }
                }
                },
                {name: 'emails', index: 'emails', width: 250, resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var emailHTML = "";
                    var emails = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(email) {
                            if (email.label == 'HOME') {
                                var label = email.label;
                                var value = email.value;
                                var obj = {label: label, value: value};
                                emails.push(obj);
                            }
                        });

                        if (emails.length > 1) {
                            emailHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(emails[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            emails.forEach(function (q) {
                                emailHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '</a></li>';

                            });
                            emailHTML += '</ul></div>';
                        } else {
                            var e = (emails.length==1)?emails[0].value:"";
                            emailHTML = '<div class="contact-grid-column-padding">' + e + '</div>';
                        }
                    }
                    return emailHTML;
                }
                },
                {name: 'emails', index: 'emails', width: 250, resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var emailHTML = "";
                    var emails = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(email) {
                            if (email.label == 'OFFICE') {
                                var label = email.label;
                                var value = email.value;
                                var obj = {label: label, value: value};
                                emails.push(obj);
                            }
                        });

                        if (emails.length > 1) {
                            emailHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(emails[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            emails.forEach(function (q) {
                                emailHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '</a></li>';

                            });
                            emailHTML += '</ul></div>';
                        } else {
                            var e = (emails.length==1)?emails[0].value:"";
                            emailHTML = '<div class="contact-grid-column-padding">' + e + '</div>';
                        }
                    }
                    return emailHTML;
                }
                },
                {name: 'emails', index: 'emails', width: 250, resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var emailHTML = "";
                    var emails = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(email) {
                            if (email.label == 'OTHER') {
                                var label = email.label;
                                var value = email.value;
                                var obj = {label: label, value: value};
                                emails.push(obj);
                            }
                        });

                        if (emails.length > 1) {
                            emailHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(emails[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            emails.forEach(function (q) {
                                emailHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            emailHTML += '</ul></div>';
                        } else {
                            var e = (emails.length==1)?emails[0].value:"";
                            emailHTML = '<div class="contact-grid-column-padding">' + e + '</div>';
                        }
                    }
                    return emailHTML;
                }
                },
                {name: 'phones', index: 'phones', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var phonesHTML = "";
                    var phones = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(phone) {
                            if (phone.label == 'HOME') {
                                var label = phone.label;
                                var value = phone.value;
                                var obj = {label: label, value: value};
                                phones.push(obj);
                            }
                        });

                        if (phones.length > 1) {
                            phonesHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(phones[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            phones.forEach(function (q) {
                                phonesHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '</a></li>';

                            });
                            phonesHTML += '</ul></div>';
                        } else {
                            var p = (phones.length==1)?phones[0].value:"";
                            phonesHTML = '<div class="contact-grid-column-padding">' + p + '</div>';
                        }
                    }
                    return phonesHTML;
                }
                },
                {name: 'phones', index: 'phones', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var phonesHTML = "";
                    var phones = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(phone) {
                            if (phone.label == 'OFFICE') {
                                var label = phone.label;
                                var value = phone.value;
                                var obj = {label: label, value: value};
                                phones.push(obj);
                            }
                        });

                        if (phones.length > 1) {
                            phonesHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(phones[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            phones.forEach(function (q) {
                                phonesHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '</a></li>';

                            });
                            phonesHTML += '</ul></div>';
                        } else {
                            var p = (phones.length==1)?phones[0].value:"";
                            phonesHTML = '<div class="contact-grid-column-padding">' + p + '</div>';
                        }
                    }
                    return phonesHTML;
                }
                },
                {name: 'phones', index: 'phones', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var phonesHTML = "";
                    var phones = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(phone) {
                            if (phone.label == 'MOBILE') {
                                var label = phone.label;
                                var value = phone.value;
                                var obj = {label: label, value: value};
                                phones.push(obj);
                            }
                        });

                        if (phones.length > 1) {
                            phonesHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(phones[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            phones.forEach(function (q) {
                                phonesHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '</a></li>';

                            });
                            phonesHTML += '</ul></div>';
                        } else {
                            var p = (phones.length==1)?phones[0].value:"";
                            phonesHTML = '<div class="contact-grid-column-padding">' + p + '</div>';
                        }
                    }
                    return phonesHTML;
                }
                },
                {name: 'phones', index: 'phones', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var phonesHTML = "";
                    var phones = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(phone) {
                            if (phone.label == 'MAIN') {
                                var label = phone.label;
                                var value = phone.value;
                                var obj = {label: label, value: value};
                                phones.push(obj);
                            }
                        });

                        if (phones.length > 1) {
                            phonesHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(phones[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            phones.forEach(function (q) {
                                phonesHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '</a></li>';

                            });
                            phonesHTML += '</ul></div>';
                        } else {
                            var p = (phones.length==1)?phones[0].value:"";
                            phonesHTML = '<div class="contact-grid-column-padding">' + p + '</div>';
                        }
                    }
                    return phonesHTML;
                }
                },
                {name: 'phones', index: 'phones', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var phonesHTML = "";
                    var phones = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(phone) {
                            if (phone.label == 'HOME_FAX') {
                                var label = phone.label;
                                var value = phone.value;
                                var obj = {label: label, value: value};
                                phones.push(obj);
                            }
                        });

                        if (phones.length > 1) {
                            phonesHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(phones[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            phones.forEach(function (q) {
                                phonesHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '</a></li>';

                            });
                            phonesHTML += '</ul></div>';
                        } else {
                            var p = (phones.length==1)?phones[0].value:"";
                            phonesHTML = '<div class="contact-grid-column-padding">' + p + '</div>';
                        }
                    }
                    return phonesHTML;
                }
                },
                {name: 'phones', index: 'phones', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var phonesHTML = "";
                    var phones = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(phone) {
                            if (phone.label == 'BUSINESS_FAX') {
                                var label = phone.label;
                                var value = phone.value;
                                var obj = {label: label, value: value};
                                phones.push(obj);
                            }
                        });

                        if (phones.length > 1) {
                            phonesHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(phones[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            phones.forEach(function (q) {
                                phonesHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '</a></li>';

                            });
                            phonesHTML += '</ul></div>';
                        } else {
                            var p = (phones.length==1)?phones[0].value:"";
                            phonesHTML = '<div class="contact-grid-column-padding">' + p + '</div>';
                        }
                    }
                    return phonesHTML;
                }
                },
                {name: 'phones', index: 'phones', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var phonesHTML = "";
                    var phones = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(phone) {
                            if (phone.label == 'OTHER') {
                                var label = phone.label;
                                var value = phone.value;
                                var obj = {label: label, value: value};
                                phones.push(obj);
                            }
                        });

                        if (phones.length > 1) {
                            phonesHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(phones[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            phones.forEach(function (q) {
                                phonesHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            phonesHTML += '</ul></div>';
                        } else {
                            var p = (phones.length==1)?phones[0].value:"";
                            phonesHTML = '<div class="contact-grid-column-padding">' + p + '</div>';
                        }
                    }
                    return phonesHTML;
                }
                },
                {name: 'company_name', index: 'company_name', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    if (cellvalue) {
                        return '<div class="contact-grid-column-padding">' + _.escape(cellvalue) + '</div>';
                    } else {
                        return "";
                    }
                }
                },
                {name: 'addresses', index: 'addresses', width: 250, resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var addressesHTML = "";
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(address) {
                            if (address.label == 'HOME') {
                                addressesHTML = address.value;
                            }
                        });
                    }
                    return '<div class="contact-grid-column-padding">' + addressesHTML + '</div>';
                }
                },
                {name: 'addresses', index: 'addresses', width: 250, resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var addressesHTML = "";
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(address) {
                            if (address.label == 'OFFICE') {
                                addressesHTML = address.value;
                            }
                        });
                    }
                    return '<div class="contact-grid-column-padding">' + addressesHTML + '</div>';
                }
                },
                {name: 'web_pages', index: 'web_pages', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var webpagesHTML = "";
                    var webpages = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(webpage) {
                            var label = webpage.label;
                            var value = webpage.value;
                            var obj = {label: label, value: value};
                            webpages.push(obj);
                        });

                        if (webpages.length > 1) {
                            webpagesHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(webpages[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            webpages.forEach(function (q) {
                                webpagesHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            webpagesHTML += '</ul></div>';
                        } else {
                            var w = (webpages.length==1)?webpages[0].value:"";
                            webpagesHTML = w;
                        }
                    }
                    return webpagesHTML;
                }
                },
                {name: 'im', index: 'im', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var imHTML = "";
                    var ims = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(im) {
                            if (im.label == 'SKYPE') {
                                var label = im.label;
                                var value = im.value;
                                var obj = {label: label, value: value};
                                ims.push(obj);
                            }
                        });

                        if (ims.length > 1) {
                            imHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(ims[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            ims.forEach(function (q) {
                                imHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            imHTML += '</ul></div>';
                        } else {
                            imHTML = (ims.length>0) ? '<div class="contact-grid-column-padding">' + ims[0].value + '</div>' : "";
                        }
                    }
                    return imHTML;
                }
                },
                {name: 'im', index: 'im', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var imHTML = "";
                    var ims = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(im) {
                            if (im.label == 'FACEBOOK') {
                                var label = im.label;
                                var value = im.value;
                                var obj = {label: label, value: value};
                                ims.push(obj);
                            }
                        });

                        if (ims.length > 1) {
                            imHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(ims[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            ims.forEach(function (q) {
                                imHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            imHTML += '</ul></div>';
                        } else {
                            imHTML = (ims.length>0) ? '<div class="contact-grid-column-padding">' + ims[0].value + '</div>' : "";
                        }
                    }
                    return imHTML;
                }
                },
                {name: 'im', index: 'im', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var imHTML = "";
                    var ims = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(im) {
                            if (im.label == 'QQ') {
                                var label = im.label;
                                var value = im.value;
                                var obj = {label: label, value: value};
                                ims.push(obj);
                            }
                        });

                        if (ims.length > 1) {
                            imHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(ims[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            ims.forEach(function (q) {
                                imHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            imHTML += '</ul></div>';
                        } else {
                            imHTML = (ims.length>0) ? '<div class="contact-grid-column-padding">' + ims[0].value + '</div>' : "";
                        }
                    }
                    return imHTML;
                }
                },
                {name: 'im', index: 'im', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var imHTML = "";
                    var ims = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(im) {
                            if (im.label == 'LINE') {
                                var label = im.label;
                                var value = im.value;
                                var obj = {label: label, value: value};
                                ims.push(obj);
                            }
                        });

                        if (ims.length > 1) {
                            imHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(ims[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            ims.forEach(function (q) {
                                imHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            imHTML += '</ul></div>';
                        } else {
                            imHTML = (ims.length>0) ? '<div class="contact-grid-column-padding">' + ims[0].value + '</div>' : "";
                        }
                    }
                    return imHTML;
                }
                },
                {name: 'im', index: 'im', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var imHTML = "";
                    var ims = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(im) {
                            if (im.label == 'WECHAT') {
                                var label = im.label;
                                var value = im.value;
                                var obj = {label: label, value: value};
                                ims.push(obj);
                            }
                        });

                        if (ims.length > 1) {
                            imHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(ims[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            ims.forEach(function (q) {
                                imHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            imHTML += '</ul></div>';
                        } else {
                            imHTML = (ims.length>0) ? '<div class="contact-grid-column-padding">' + ims[0].value + '</div>' : "";
                        }
                    }
                    return imHTML;
                }
                },
                {name: 'im', index: 'im', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var imHTML = "";
                    var ims = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(im) {
                            if (im.label == 'YAHOO') {
                                var label = im.label;
                                var value = im.value;
                                var obj = {label: label, value: value};
                                ims.push(obj);
                            }
                        });

                        if (ims.length > 1) {
                            imHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(ims[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            ims.forEach(function (q) {
                                imHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            imHTML += '</ul></div>';
                        } else {
                            imHTML = (ims.length>0) ? '<div class="contact-grid-column-padding">' + ims[0].value + '</div>' : "";
                        }
                    }
                    return imHTML;
                }
                },
                {name: 'im', index: 'im', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var imHTML = "";
                    var ims = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(im) {
                            if (im.label == 'GTALK') {
                                var label = im.label;
                                var value = im.value;
                                var obj = {label: label, value: value};
                                ims.push(obj);
                            }
                        });

                        if (ims.length > 1) {
                            imHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(ims[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            ims.forEach(function (q) {
                                imHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            imHTML += '</ul></div>';
                        } else {
                            imHTML = (ims.length>0) ? '<div class="contact-grid-column-padding">' + ims[0].value + '</div>' : "";
                        }
                    }
                    return imHTML;
                }
                },
                {name: 'im', index: 'im', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var imHTML = "";
                    var ims = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(im) {
                            if (im.label != 'SKYPE' && im.label != 'FACEBOOK' && im.label != 'QQ' && im.label != 'LINE' && im.label != 'WECHAT' && im.label != 'YAHOO' && im.label != 'GTALK') {
                                var label = im.label;
                                var value = im.value;
                                var obj = {label: label, value: value};
                                ims.push(obj);
                            }
                        });

                        if (ims.length > 1) {
                            imHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(ims[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            ims.forEach(function (q) {
                                imHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            imHTML += '</ul></div>';
                        } else {
                            imHTML = (ims.length>0) ? '<div class="contact-grid-column-padding">' + ims[0].value + '</div>' : "";
                        }
                    }
                    return imHTML;
                }
                },
                {name: 'events', index: 'events', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var eventsHTML = "";
                    var events = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(event) {
                            if (event.label == 'BIRTH_DATE') {
                                var label = event.label;
                                var value = event.value;
                                var obj = {label: label, value: value};
                                events.push(obj);
                            }
                        });

                        if (events.length > 1) {
                            eventsHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(events[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            events.forEach(function (q) {
                                var d = new Date(q.value);
                                var date = d.getDate();
                                var month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][d.getMonth()];
                                var year = d.getFullYear();
                                eventsHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + [date, month, year].join('-') + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            eventsHTML += '</ul></div>';
                        } else {
                            var d = new Date(events[0].value);
                            var date = d.getDate();
                            var month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][d.getMonth()];
                            var year = d.getFullYear();
                            eventsHTML = (events.length>0) ? '<div class="contact-grid-column-padding">' + [date, month, year].join('-') + '</div>' : "";
                        }
                    }
                    return eventsHTML;
                }
                },
                {name: 'events', index: 'events', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var eventsHTML = "";
                    var events = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(event) {
                            if (event.label == 'ANNIVERSARY') {
                                var label = event.label;
                                var value = event.value;
                                var obj = {label: label, value: value};
                                events.push(obj);
                            }
                        });

                        if (events.length > 1) {
                            eventsHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(events[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            events.forEach(function (q) {
                                var d = new Date(q.value);
                                var date = d.getDate();
                                var month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][d.getMonth()];
                                var year = d.getFullYear();
                                eventsHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + [date, month, year].join('-') + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            eventsHTML += '</ul></div>';
                        } else {
                            var d = new Date(events[0].value);
                            var date = d.getDate();
                            var month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][d.getMonth()];
                            var year = d.getFullYear();
                            eventsHTML = (events.length>0) ? '<div class="contact-grid-column-padding">' + [date, month, year].join('-') + '</div>' : "";
                        }
                    }
                    return eventsHTML;
                }
                },
                {name: 'events', index: 'events', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var eventsHTML = "";
                    var events = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(event) {
                            if (event.label != 'BIRTH_DATE' && event.label != 'ANNIVERSARY') {
                                var label = event.label;
                                var value = event.value;
                                var obj = {label: label, value: value};
                                events.push(obj);
                            }
                        });

                        var d = new Date(events[0].value);
                        var date = d.getDate();
                        var month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][d.getMonth()];
                        var year = d.getFullYear();

                        if (events.length > 1) {
                            eventsHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + [date, month, year].join('-') + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            events.forEach(function (q) {
                                var d = new Date(q.value);
                                var date = d.getDate();
                                var month = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"][d.getMonth()];
                                var year = d.getFullYear();
                                eventsHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + [date, month, year].join('-') + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            eventsHTML += '</ul></div>';
                        } else {
                            eventsHTML = (events.length>0) ? '<div class="contact-grid-column-padding">' + [date, month, year].join('-') + '</div>' : "";
                        }
                    }
                    return eventsHTML;
                }
                },
                {name: 'note', index: 'note', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    if (cellvalue) {
                        return '<div class="contact-grid-column-padding">' + _.escape(cellvalue) + '</div>';
                    } else {
                        return "";
                    }
                }
                },
                {name: 'others', index: 'others', resizable: false, formatter: function (cellvalue, options, rowObject) {
                    var customsHTML = "";
                    var customs = [];
                    if (cellvalue.length > 1) {
                        _.filter(cellvalue, function(custom) {
                            var label = custom.label;
                            var value = custom.value;
                            var obj = {label: label, value: value};
                            customs.push(obj);
                        });

                        if (customs.length > 1) {
                            customsHTML += '<div class="dropdown"><button id="email_' + rowObject._id + '"class="btn btn-default dropdown-toggle sendQMailBtn contact-grid-phone-button" data-toggle="dropdown">' + _.escape(customs[0].value) + '  <span class="caret contact-grid-caret"></span></button><ul class="dropdown-menu">';
                            customs.forEach(function (q) {
                                customsHTML += '<li class="common-hover-background"><a class="contact-grid-phone-a" href="javascript:void(0)" >' + '<span id="email_' + rowObject._id + '">' + q.value + '</span>' + '  <span class="mobile-type-drop-down-contact-grid">' + $filter('translate')(q.label) + '</span>' + '</a></li>';

                            });
                            customsHTML += '</ul></div>';
                        } else {
                            customsHTML = (customs.length>0) ? '<div class="contact-grid-column-padding">' + customs[0].value + '</div>' : "";
                        }
                    }
                    return customsHTML;
                }
                }
            ],
            scope: $scope,
            serializeGridData: function (postData) {
                postData.limit = postData.rows;
                postData.page = postData.page - 1;
                return postData;
            },
            multiselect: true,
            rowNum: 50,
            rowList: [50, 100, 500],
            pageable: true,
            jsonReader: {
                root: 'data.data',
                rows: function (obj) {
                    return obj.data.data;
                },
                records: function (obj) {
                    $scope.allUsers = obj.data.data;
                    return obj.data.total;
                },
                page: function (obj) {
                    return obj.data.page + 1;
                },
                total: function (obj) {
                    return parseInt(obj.data.pages);
                }
            }
        };

        $scope.importPreview = function() {
            Preview.import($scope.ngDialogData.preview_id, function(response, err){
                console.log(response);
            });
        };

        $scope.discardPreview = function() {
            Preview.discard($scope.ngDialogData.preview_id, function(response, err){
                console.log(response);
            });
        };
    }]);
})();
'use strict';

var showing = false;
app.controller('PrivateCtrl', ['$scope', 'Contact', '$log', 'Private', 'SID', '$location', 'ngDialog', '$http', function ($scope, Contact, $log, Private, SID, $location, ngDialog, $http) {
    $scope.favoriteReload = 0;
    $scope.privateReload = 1;
    $scope.deleteReload = 1;
    //$scope.loadContacts();
    $scope.loadContacts = function () {
        $scope.gridOptions.loading = true;
        var pageSizeparam = $scope.paginationOptions.pageSize;
        var pageNumberparam = $scope.paginationOptions.pageNumber - 1;
        Contact.getPrivateContacts('limit=' + pageSizeparam + '&page=' + pageNumberparam, function (response, err) {
            if (response.data.status == true) {
                $scope.gridOptions.data = response.data.data.data;
                $scope.gridOptions.totalItems = response.data.data.total;
                if (!showing) {
                    $(".ui-grid-pager-count-container").prepend("Showing");
                    showing = true;
                }
                $scope.gridOptions.loading = false;
            } else {
                $scope.gridOptions.data = [];
            }
        });
    };

}]);
        
'use strict';

app.controller('SnapshotManagerCtrl', ['$scope', 'ngDialog', '$filter', 'SnapshotManagement', 'usSpinnerService', '$location', '$window', 'toasty',
        function ($scope, ngDialog, $filter, SnapshotManagement, usSpinnerService, $location, $window, toasty) {
    $scope.$parent.boolShowAddContact = true;
    $scope.snapshotList = [];
    $scope.defaultSnapshotName = 'Snapshot_'+$filter('date')(new Date(), 'yyyy-MM-dd_HH:mm:ss');
    $scope.openCreateSnapshot = function () {
        ngDialog.close();
        ngDialog.open({
            template: 'views/create-snapshot.html',
            controller: 'SnapshotManagerCtrl',
            className: 'ngdialog-theme-default custom-width-500',
            closeByDocument: false
        });
    };

    $scope.listSnapshot = function(){
        ngDialog.close();
        ngDialog.open({
            template: 'views/list-snapshot.html',
            controller: 'SnapshotManagerCtrl',
            className: 'ngdialog-theme-default restore-dialog',
            closeByDocument: false
        })
    };

    $scope.getSnapshotList = function() {        
        SnapshotManagement.getSnapshotList('', function(response, err) {
            if(err) {
                console.log("error in retreiving records")
            } else {
                if(response.data.status ==true) {
                    $scope.snapshotList = response.data.data;
                } else {
                    $scope.snapshotList = [];
                }                
            }

        })
    };
    
    $scope.takeSnapshot = function (snapshot) {
        if($scope.snapshot.name && $scope.snapshot.name.length > 0 ) {
            $scope.loading = true;
            SnapshotManagement.takeSnapshot({"display_name":$scope.snapshot.name}, function(response, err){  
                $scope.loading = false;        
                ngDialog.close();              
                if(response.data.status) {
                    toasty.success({                    
                        msg: $filter('translate')('SNAPSHOT_SUCCESS')
                    });                    
                } else {
                    toasty.error({                    
                        msg: $filter('translate')('SNAPSHOT_FAILURE')
                    });                    
                }                
            })    
        } else {
            toasty.error({                    
                msg: $filter('translate')('SNAPSHOT_NAME_VALIDATION')
            });                    
        }
    };

    $scope.deleteSnapshot = function(index) {
        ngDialog.openConfirm({
            template:
                    '<p>' + $filter('translate')('SNAPSHOT_DELETE_CONFIRMATION') + '</p>' +
                    '<footer><div class="confirm-buttons">' +
                    '<button type="button" class="mycontacts-btn" ng-click="confirm(1)">' + $filter('translate')('CONFIRM') + '</button>&nbsp;&nbsp;&nbsp;' +
                    '<button type="button" class="cancel" ng-click="closeThisDialog(0)">' + $filter('translate')('CANCEL') +
                    '</button></div></footer>',

            plain: true,
            className: 'ngdialog-theme-default'
        }).then(function (value) {
            var snapshotId = $scope.snapshotList[index]._id;
            if(snapshotId) {
                $scope.loading = true;
                SnapshotManagement.deleteSnapshot(snapshotId, function(response, err){  
                    $scope.loading = false;                                      
                    if(response.data.status) {
                        $scope.snapshotList.splice(index, 1);    
                        toasty.error({                    
                            msg: $filter('translate')('SNAPSHOT_DELETE_SUCCESS')
                        });                
                    } else {
                        toasty.error({                    
                            msg: $filter('translate')('SNAPSHOT_DELETE_FAILURE')
                        });                    
                    }                
                })
            } else {
                toasty.error({                    
                    msg: $filter('translate')('SNAPSHOT_DELETE_FAILURE')
                });

            }
        });
    }

    $scope.confirmSnapshotRestore = function(index) {        
        var snapshotId = $scope.snapshotList[index]._id;
        if(snapshotId){            
            $scope.create_snapshot = true;
            //open confirmation box
            ngDialog.open({
                template:'<loading></loading>'
                    +'<div id="restore-confirmation">'
                    +'<div class="info-block">' 
                        +'<div>'
                            + '<span id="info-icon">IMG</span>'
                        +'</div>'
                        +'<div class="content">'
                            +'<div class=""><p> '+$filter('translate')('RESTORE_MESSAGE_1')+' <p></div>'
                            +'<div class="info-data"><p> '+$filter('translate')('RESTORE_MESSAGE_2')+' <p></div>'
                            +'<div class="create-snapshot">'
                                +'<input type="checkbox"  ng-model="create_snapshot" ng-init="create_snapshot=true">'
                                +' ' + $filter('translate')('AUTOMATIC_SNAPSHOT')
                            +'</div>'
                        +'</div>'                         
                    +'</div>'
                    +'<div class="confirm-buttons">'
                        + '<button class="apply" ng-click="restoreSnapshot(\''+snapshotId+'\')">'+$filter('translate')('YES')+'</button>'
                        + '<button class="cancel" ng-click="closeThisDialog();">'+$filter('translate')('NO')+'</button>'
                    +'</div>'
                +'</div>',
                plain:true,
                controller: 'SnapshotManagerCtrl',
                closeByDocument: false
            });
        } else {
            toasty.error({                    
                msg: $filter('translate')('RESTORE_FAILURE')
            });            
        }
    };

    $scope.restoreSnapshot = function(id, restoreId){
        if(id) {
            $scope.loading = true;
            var params = {snapshot_id : id, create_snapshot: $scope.create_snapshot};

            if(restoreId && restoreId.length > 0) {
                params.restore_id = restoreId;
            }
            
            SnapshotManagement.restoreSnapshot(params, function(response, err){
                $scope.loading = false;
                if(response.data.status){
                    $location.path('/contacts');
                    $window.location.reload();
                } else {
                    toasty.error({                    
                        msg: $filter('translate')('RESTORE_FAILURE')
                    });                    
                }
            }) 
        } else {
            toasty.error({                    
                msg: $filter('translate')('RESTORE_FAILURE')
            });            
        }
    };    
}]);
'use strict';
var openedWindow;

app.controller('SyncCtrl', ['$compile','$rootScope','$scope', 'Sync', 'ngDialog', 'BackgroundTask', '$location', '$routeParams', '$filter', '$cookies', 'toasty', 'User', 'Contact',
    function ($compile, $rootScope, $scope, Sync, ngDialog, BackgroundTask, $location, $routeParams, $filter, $cookies, toasty, User, Contact) {
        
        $rootScope.$emit('load_groups');
        $scope.$parent.boolShowAddContact = true;
        $scope.showHistory = {};
        $scope.showHistory.showGrid = true;
        var manageAccountDailog;
        $scope.OnDisconnectButtonCloseManageAccountDailog;
        var manualSynDailog;
        $scope.importType = {};
        $scope.importType.importTypeDifferential = true;
        $scope.importType.SyncTime = {};
        
        $scope.recordIDForSyncManual = 0;
        $scope.selected = {};
        $scope.selected.gridSelectedRows = [];
        $scope.googleLogin = function () {
            var url = config.GOOGLE_CONNECTOR_URL;
                url += "?app_id=" + config.GOOGLE_CONNECTOR_APPID;
                url += "&provider=" + config.GOOGLE_CONNECTOR_PROVIDER;
                url += "&scope=" + config.GOOGLE_CONNECTOR_SCOPE;
                url += "&cb=" + config.GOOGLE_CONNECTOR_CALLBACK_URL;

            openedWindow = window.open(url, "_blank", "toolbar=yes, scrollbars=yes, resizable=yes, top=200, left=500, width=700, height=600");
            if (window.addEventListener) {
                window.addEventListener("message", $scope.receiveMessage, false);
            } else {
                window.attachEvent("onmessage", $scope.receiveMessage);
            }
        };

        $scope.receiveMessage = function(event) {
            var token = event.data.split('result=')[1].replace('#','');

            //Need to remove event listener after we receive the message.
            window.removeEventListener('message', $scope.receiveMessage);
            openedWindow.close();

            if (token[1].indexOf('access_denied') > -1) {
                toasty.error({
                    msg: $filter('translate')('IMPORT_CONTACTS_FAILED')
                });
            } else {
                //$scope.getGoogleContacts(token[1]);
                token = decodeURIComponent(token);
                $scope.getGoogleContacts(token.split("\,+").join(",").split(":+").join(":"));
            }
        };

        $scope.getGoogleContacts = function (auth_key) {
           var tempDailog =  ngDialog.open({
                template: 'views/partials/importing-loader.html',
                controller: 'MainCtrl',
                closeByDocument: false
            });
            //Sync.getGoogleContacts({auth_key:auth_key.slice(0, -1)}, function(response, err){
            Sync.getGoogleContacts({result:auth_key}, function(response, err){
                BackgroundTask = BackgroundTask.connect();
                BackgroundTask.on('task:progress', function(data) {
                    if(data.progress == '100%'){
                        tempDailog.close();
                        var path = $location.$$path;
                        if (path == "/default") {
                            $location.path('/contacts');
                        } else {
                            if (path == "/sync") {
                                $('#manage-account').trigger('reloadGrid');
                                $('#history-grid').trigger('reloadGrid');
                            }
                        }
                    }
                    if(!$scope.$$phase) $scope.$apply();
                });
            });
        };

        $scope.importFile = function(file, errorFile) {
            if (!errorFile && file) {
                ngDialog.close();
               var tempDailog =  ngDialog.open({
                    template: 'views/partials/importing-loader.html',
                    controller: 'MainCtrl',
                    closeByDocument: false
                });

                Sync.importFile(file, function(response, err){
                    BackgroundTask = BackgroundTask.connect();
                    BackgroundTask.on('task:progress', function(data) {
                        if(data.progress == '100%'){
                            tempDailog.close();
                            if ($location.$$path == "/default") {
                                $('#history-grid').trigger('reloadGrid');
                                $location.path('/contacts');
                            } else {
                                if ($location.$$path == "/sync") {
                                    $('#manage-account').trigger('reloadGrid');
                                    $('#history-grid').trigger('reloadGrid');
                                }
                            }
                        }
                        if(!$scope.$$phase) $scope.$apply();
                    });
                });
            }
        };

        $scope.openFileImport = function() {
            ngDialog.open({
                template: 'views/partials/file-import.html',
               controller:'importFileCtrl',
                closeByDocument: false,
                className: 'ngdialog-theme-default custom-width-900-import'
            });
        };

        $scope.loadHistory = function () {
            Sync.getHistory(function(response, err){
                $scope.history = response.data.data;
                $scope.showHistory.showGrid = response.data.data.total > 0 ? true : false;
                $("#history-grid").setGridWidth(($(window).innerWidth()-275), false);
            });
        };

        $scope.config = {
            datatype: 'json',
            ajaxGridOptions: { contentType: "application/json", cache: false },
            url: config.API_URL + 'notifications?type=import',
            loadBeforeSend: function (jqXHR) {
                jqXHR.setRequestHeader('Authorization', 'bearer ' + $cookies.get('accessToken'));
            },
            userData: $scope.history,
            colNames: [$filter('translate')('IMPORT_SOURCE_TYPE'), $filter('translate')('IMPORT_SOURCE_DETAILS'), $filter('translate')('ACCOUNT_IMPORTED_TIME'), $filter('translate')('ACCOUNT_IMPORT_STATUS_HISTORY')],
            colModel: [
                { name: 'sub_type', index: 'sub_type', width: 300 },
                { name: 'import_from', index: 'import_from', width: 400 },
                {
                    name: 'logged_on', index: 'logged_on', width: 345, formatter: function (cellvalue, options, rowObject) {
                        return moment(cellvalue).format('DD-MM-YYYY HH:mm:ss');
                    }
                },
                { name: 'status', index: 'status', width: 600 }
            ],
            scope: $scope,
            serializeGridData: function (postData) {
                postData.limit = postData.rows;
                postData.page = postData.page - 1;
                return postData;
            },
            rowNum: 50,
            rowList: [50, 100, 500],
            pageable: true,
            jsonReader: {
                root: 'data.data',
                rows: function (obj) {
                    return obj.data.data;
                },
                records: function (obj) {
                    return obj.data.total;
                },
                page: function (obj) {
                    return obj.data.page + 1;
                },
                total: function (obj) {
                    return parseInt(obj.data.pages);
                }
            },
            pager: '#pagerhistory-grid'
        };
      
        //$scope.config = {
        //    datatype: 'json',
        //    ajaxGridOptions: {contentType: "application/json", cache: false},
        //    url: config.API_URL + 'imports/google/sync',
        //    loadBeforeSend: function (jqXHR) {
        //        jqXHR.setRequestHeader('Authorization', 'bearer ' + $cookies.get('accessToken'));
        //    },
        //    userData: $scope.history,
        //    colNames: [$filter('translate')('IMPORT_SOURCE_TYPE'), $filter('translate')('IMPORT_SOURCE_DETAILS'), $filter('translate')('ACCOUNT_LAST_IMPORTED_TIME'), $filter('translate')('ACCOUNT_IMPORT_SCHEDULE')],
        //    colModel: [
        //        { name: 'account_type', index: 'account_type', width: 300 },
        //        { name: 'account_name', index: 'account_name', width: 300 },
        //        {
        //            name: 'last_sync', index: 'last_sync', width: 300, formatter: function (cellvalue, options, rowObject) {
        //                return moment(cellvalue).format('DD MMM YYYY HH:mm:ss');
        //            }
        //        },
        //         {
        //             name: 'trigger_break', index: 'trigger_break', width: 300, formatter: function (cellvalue, options, rowObject) {
        //                 var val = "";
        //                 angular.forEach($scope.importType.SyncTime, function (value, key) {
        //                     if (value.value.toString() == cellvalue) {
        //                         val= value.key.toString();
        //                     }
        //                 });
        //                 if (val == "") {
        //                     return "--";
        //                 }
        //                 return $filter('translate')(val);
        //             }
        //         }
        //    ],
        //    scope: $scope,
        //    jsonReader: {
        //        root: 'data',
        //        rows: function (obj) {
        //            return obj.data.data;
        //        }
        //    }
        //};

        $scope.openManageAccountDailog = function () {
            $scope.selected.gridSelectedRows = [];
            Sync.getSyncAccount(function (resp, error) {
                var msg = resp.data.data.length;
                if (msg > 0) {
                    manageAccountDailog = ngDialog.open({
                        template: 'views/partials/import-manage-account.html',
                        scope: $scope,
                        className: 'ngdialog-theme-default custom-width-900'
                    });
                } else {
                    manageAccountDailog = ngDialog.open({
                        template: 'views/partials/import-manage-account-no-history.html',
                        scope: $scope,
                        className: 'ngdialog-theme-default custom-width-840'
                    });
                }
            });
        };

        $scope.syncTimeUpdate = function (id, syncTime) {
            Sync.syncTimeUpdate(id, syncTime, function (resp, err) {});
        };

        $scope.syncDeleteAccountGoogleSync = function (ids) {
            ngDialog.openConfirm({
                template:
                     '<p style="margin-top:20px;">' + '</p>' +
                    '<p>' + $filter('translate')('ACCOUNT_DELETE_WARNING_HEADER')  +"  " +
                     $filter('translate')('ACCOUNT_DELETE_WARNING_DESC') + '</p>' +
                    '<footer><div class="confirm-buttons">' +
                    '<button type="button" class="mycontacts-btn" ng-click="confirm(1)">' + $filter('translate')('CONFIRM') + '</button>&nbsp;&nbsp;&nbsp;' +
                    '<button type="button" class="cancel" ng-click="closeThisDialog(0)">' + $filter('translate')('CANCEL') +
                    '</button></div></footer>',
                plain: true,
                className: 'ngdialog-theme-default'
            }).then(function (value) {
                Sync.syncDeleteAccountGoogleSync($scope.selected.gridSelectedRows, function (response, err) {
                    if (response.status) {
                        $('#manage-account').trigger('reloadGrid');
                        $('#history-grid').trigger('reloadGrid');
                        setTimeout(function () {
                            var records = $('#manage-account').jqGrid('getGridParam', 'records');
                            if (records == 0) {
                                manageAccountDailog.close();
                                $scope.openManageAccountDailog();
                            }
                        }, 100);
                    }
                });
            });
           
        };

        Sync.syncTimeList(function (resp, err) {
            $scope.importType.SyncTime = resp.data.data;

            $scope.configForManageAccounts = {
                datatype: 'json',
                ajaxGridOptions: { contentType: "application/json", cache: false },
                url: config.API_URL + 'imports/google/sync',
                loadBeforeSend: function (jqXHR) {
                    jqXHR.setRequestHeader('Authorization', 'bearer ' + $cookies.get('accessToken'));
                },
                id: '_id',
                height: 350,
                width: 830,
                colNames: ['id', $filter('translate')('LABEL_USERNAME'), $filter('translate')('ACCOUNT_LAST_IMPORTED_TIME'), $filter('translate')('ACCOUNT_IMPORT_SCHEDULE'), $filter('translate')('ACCOUNT_IMPORT_STATUS'),''],
                colModel: [
                    { name: '_id', index: '_id', hidden: true },
                    { name: 'account_name', index: 'account_name', resizable: false, width: 190, sortable: false },
                    {
                        name: 'last_sync', index: 'last_sync', resizable: false, width: 195, sortable: false,
                        formatter: function (cellvalue, options, rowObject) {
                            var cellString = moment(cellvalue).format('DD MMM YYYY HH:mm:ss');
                            return '<div class="hand-cursor">' + cellString + ' <img src="resources/img/um_import.png"></div>';
                        }
                    },
                    {
                        name: 'trigger_break', index: 'trigger_break', resizable: false, width: 145, sortable: false,
                        formatter: function (cellvalue, options, rowObject) {
                            var cellstring = '<select class="select-ele" id="sync_'+rowObject._id +'">';
                            angular.forEach($scope.importType.SyncTime, function (value, key) {
                                if (value.value.toString() == cellvalue) {
                                    cellstring += '<option selected value="'+ value.value+'"  >' +$filter('translate')(value.key)  + '</option>';
                                } else {
                                    cellstring += '<option value="' + value.value + '"  >' + $filter('translate')(value.key) + '</option>';
                                }
                            });
                            cellstring += "</select>";
                            return cellstring;
                        }
                    },
                    {
                        name: 'last_sync_status', index: 'last_sync_status', resizable: false, width: 155, sortable: false,
                        formatter: function (cellvalue, options, rowObject) {
                            if (cellvalue == true) {
                                return '<div class="account-connected-foreground">Connected</div>';
                            }
                            return '<div class="account-disconnected-foreground">Disconnected <label class="account-disconnected-info-circle-base">!</label><img  class="hand-cursor" src="resources/img/um_refresh.png"></div>';
                        }
                    },
                      {
                          name: 'delete', index: 'delete', resizable: false, width: 79, sortable: false,
                          formatter: function (cellvalue, options, rowObject) {
                              return '<div class="hand-cursor"> <img src="resources/img/um_delete.png"></div>';
                          }
                      },
                ],
                scope: $scope,
                multiselect: true,
                pageable: true,
                jsonReader: {
                    root: 'data',
                    rows: function (obj) {
                        return obj.data;
                    }
                }
            };
        });

        $scope.onSelectRowManageAccout = function (scope, status, id) {

            if (status) {
                
            } else {
                
            }
        };

        $scope.onSelectAllManageAccount = function (scope, status, ids) {
            if (status) {
                
            } else {
               
            }
        };

        $scope.onLastImportedTimeUpdate = function (id) {
            $scope.recordIDForSyncManual = id;
            manualSynDailog = ngDialog.open({
                scope: $scope,
                template: 'views/partials/import-sync-dailog.html',
                className: 'ngdialog-theme-default custom-width-300'
            });
        };

        $scope.closeManualImport = function () {
            manualSynDailog.close();
        };

        $scope.OnManualImportClick = function () {
            Sync.manualImport($scope.recordIDForSyncManual, !$scope.importType.importTypeDifferential, function (response, err) {
                manualSynDailog.close();
            });
            $('#manage-account').trigger('reloadGrid');
            $('#history-grid').trigger('reloadGrid');
        };

        $scope.openAddUser = function () {
            ngDialog.open({
                template: 'views/add-user.html',
                scope: $scope,
                closeByDocument: false
            });
        };

        $scope.onSelectRow = function (scope, action, params, id) {
            switch (action) {
                case 'delete':
                    $scope.deleteUser(id);
                    break;
            }
        };

        $scope.OnDisconnectButtonCloseManageAccountDailog = function (status) {
            if (status !== '<div class="account-connected-foreground">Connected</div>') {
                $scope.googleLogin();
            }
        };
}]);
'use strict';

app.controller('UserManagementCtrl', ['$scope', 'UserManagement', 'User', '$location', '$cookies', '$compile', 'ngDialog', 'SID', '$filter', 'toasty', 
    function ($scope, UserManagement, User, $location, $cookies, $compile, ngDialog, SID, $filter, toasty) {
        $scope.$parent.boolShowAddContact = true;
        $scope.$parent.allUsers = {};
        $scope.accountUserData = {};
        $scope.loadUsers = function () {
            UserManagement.getUsers(function (response, err) {
                $scope.users = response.data.data.data;
            });
        };

        $scope.loadUser = function() {
            User.getLoggedInUserDetails(function (response, err) {
                $scope.user = response.data.data;
            });
        };

        $scope.selectedRows = [];
        $scope.$watch('selectedRows', function (newValue, oldValue) {
            if (newValue.length > 0)
                $scope.disable_batch_update = false;
            else
                $scope.disable_batch_update = true;
        });

        $scope.config = {
            datatype: 'json',
            ajaxGridOptions: {contentType: "application/json", cache: false},
            url: config.API_URL + 'users',
            loadBeforeSend: function (jqXHR) {
                jqXHR.setRequestHeader('Authorization', 'bearer ' + $cookies.get('accessToken'));
            },
            userData: $scope.accountUserData,
            id: '_id',
            colNames: ['id', $filter('translate')('LABEL_USERNAME'), $filter('translate')('USER'), $filter('translate')('ROLE'), ''],
            colModel: [
                {name: '_id', index: '_id', hidden: true, resizable: false, frozen: true},
                {name: 'username', index: 'username', resizable: false, frozen: true},
                {name: 'fname', index: 'fname', resizable: false, width: 215, frozen: true, formatter: function (cellvalue, options, rowObject) {
                        var fname = (rowObject.fname != undefined) ? rowObject.fname : '';
                        var lname = (rowObject.lname != undefined) ? rowObject.lname : '';
                        return '<div class="edit">' + fname + ' ' + lname + '<div>';
                    }
                },
                {name: 'role', index: 'role', resizable: false, frozen: true},
                {
                    name: 'actions',
                    index: 'actions',
                    resizable: false,
                    width: 20,
                    frozen: true,
                    align: 'center',
                    formatter: function (cellvalue, options, rowObject) {
                        var html = "";
                        if (rowObject.username != 'admin') {
                            html += '<span title="Delete" class="q-icon icon-action_delete_normal action-toolbar delete '+rowObject.is_active+'"></span>';
                        } else {
                            html += '<div style="min-width: 20px;min-height: 20px;"></div>';
                        }
                        $compile(angular.element(html))($scope);
                        return html;
                    }
                },
            ],
            scope: $scope,
            serializeGridData: function (postData) {
                postData.limit = postData.rows;
                postData.page = postData.page - 1;
                return postData;
            },
            multiselect: true,
            rowNum: 50,
            rowList: [50, 100, 500],
            pageable: true,
            jsonReader: {
                root: 'data.data',
                rows: function (obj) {
                    return obj.data.data;
                },
                records: function (obj) {
                    $scope.allUsers = obj.data.data;
                    return obj.data.total;
                },
                page: function (obj) {
                    return obj.data.page + 1;
                },
                total: function (obj) {
                    return parseInt(obj.data.pages);
                }
            },
            pager: '#pageruser-grid'
        };

        $scope.openAddUser = function () {
            ngDialog.open({
                template: 'views/add-user.html',
                scope: $scope,
                closeByDocument: false
            });
        },
                
        $scope.onSelectRow = function (scope, action, params, id) {
            switch (action) {
                case 'delete':
                    $scope.deleteUser(id);
                    break;
            }
        };
              
        $scope.deleteUser = function(id) {
            ngDialog.openConfirm({
                template:
                    '<p>'+$filter('translate')('PERMANENT_DELETE_CONTACTS_WARNING')+'</p>' +
                    '<footer><div class="confirm-buttons">' +
                    '<button type="button" class="mycontacts-btn" ng-click="confirm(1)">' + $filter('translate')('CONFIRM') + '</button>&nbsp;&nbsp;&nbsp;' +
                    '<button type="button" class="cancel" ng-click="closeThisDialog(0)">' + $filter('translate')('CANCEL') +
                    '</button></div></footer>',

                plain: true,
                className: 'ngdialog-theme-default'
            }).then(function (value) {
                UserManagement.deleteUser(id, function (response, err) {
                    if (response.status) {
                        $('#user-grid').trigger('reloadGrid');
                    }
                });
            });
        };
        
        $scope.createUser = function (user) {
            var windowIDs = ngDialog.getOpenDialogs();
            ngDialog.close(windowIDs[1]);
            
            user.password = SID.ezEncode(user.password);
            UserManagement.createUser(user, function (response, err) {
                if (response.data.status) {

                    $('#user-grid').trigger('reloadGrid');
                }
            });
        },
        
        $scope.batchDelete = function () {
            var is_admin_selected = false;
            _.filter($scope.allUsers, function(user) {
                if ($scope.selectedRows.indexOf(user._id) > -1 && user.username == 'admin') {
                    is_admin_selected = true;
                }
            })
            
            if (!is_admin_selected) {
                ngDialog.openConfirm({
                    template:
                        '<p>'+$filter('translate')('PERMANENT_DELETE_CONTACTS_WARNING')+'</p>' +
                        '<footer><div class="confirm-buttons">' +
                        '<button type="button" class="mycontacts-btn" ng-click="confirm(1)">' + $filter('translate')('CONFIRM') + '</button>&nbsp;&nbsp;&nbsp;' +
                        '<button type="button" class="cancel" ng-click="closeThisDialog(0)">' + $filter('translate')('CANCEL') +
                        '</button></div></footer>',

                    plain: true,
                    className: 'ngdialog-theme-default'
                }).then(function (value) {
                       var params = {
                        "user_ids": $scope.selectedRows,
                    };
                    UserManagement.batchDeleteUsers(params, function (response, err) {
                        if (response.status) {
                            $('#user-grid').trigger('reloadGrid');
                        }
                    });
                });
            } else {
                toasty.error({
                    msg: $filter('translate')('ADMIN_DELETE_WARNING')
                });
            }
        };
        
        $scope.editProfile = function(profileForm, user) {
            $scope.$broadcast('runCustomValidations');
            if (profileForm.$valid) {
                UserManagement.editUser(user._id, user, function (response, err) {
                    if (response.data.status) {
                        $cookies.put('accessToken', "");
                        $cookies.put('user', "");
                        ngDialog.close();

                        toasty.success({                    
                            msg: $filter('translate')('USER_EDITED_SUCCESS')
                        });
                        $location.path('/login');
                    }
                });
            }
        };

        $scope.changePassword = function(resetPasswordForm, user) {
            $scope.$broadcast('runCustomValidations');
            if (resetPasswordForm.$valid) {
                var data = {};
                data.password = SID.ezEncode(user.password);
                data.old_password = SID.ezEncode(user.old_password);

                UserManagement.resetPassword(data, function (response, err) {
                    if (response.data.status) {
                        $cookies.put('accessToken', "");
                        $cookies.put('user', "");
                        ngDialog.close();
                        toasty.success({                    
                            msg: $filter('translate')('USER_EDITED_SUCCESS')
                        });                        
                        $location.path('/login');
                    } else {
                        toasty.error({                    
                            msg: $filter('translate')('VERIFY_OLD_PASSWORD')
                        });                        
                    }
                });
            }
        }
    }]);
        

        angular.module('UserValidation', []).directive('confirmPassword', function () {
    return {
                require: 'ngModel',
                scope: {
                reference: '=confirmPassword'
            },
        link: function (scope, elm, attrs, ctrl) {
            ctrl.$parsers.unshift(function (viewValue, $scope) {
                var noMatch = viewValue != scope.reference
                ctrl.$setValidity('noMatch', !noMatch);
                 return (noMatch)?noMatch:!noMatch;
            });

            scope.$watch("reference", function(value) {
                ctrl.$setValidity('noMatch', value === ctrl.$viewValue);
            });
        }
    }
})
'use strict';

app.controller('HeaderCtrl', ['$scope', '$translate', '$filter','$cookies','$location', function ($scope, $translate, $filter,$cookies,$location) {
    $scope.changeLanguage = function (key) {
        $translate.use(key);
    };    
}]);
'use strict';

app.controller('ViewContactCtrl', ['$scope', '$location', 'contact_id', 'Contact', '$cookies', 'Group','$filter', function ($scope, $location, contact_id, Contact, $cookies, Group, $filter) {
    $scope.contact = {};
    Contact.getContact(contact_id, function(response, err){
    	$scope.accessToken = $cookies.get('accessToken');
    	if(!err && response.data.status){
    		$scope.contact = response.data.data;
    		$scope.contact.profile_pic = $scope.contact.profile_pic ? config.PIC_URL + $scope.contact.profile_pic : 'resources/img/contact_photo.png';
            if($scope.contact.events && $scope.contact.events.length > 0){
                $scope.contact.events.forEach(function(ev){
                    if(ev.value)
                        ev.value = moment(ev.value).format('DD-MMM-YYYY');
                });
            }
    		if (!$scope.$$phase) $scope.$apply();
    	} else
    		$scope.contact = {};
    });
    $scope.groups = [];
    $scope.contryDialCodes = config.COUNTRY_FLAGS;
    $scope.editContact = function(){
    	$scope.closeThisDialog('success');
    	$location.path('/contacts/edit/' + contact_id);
    };
    $scope.composeQMail = function (email) {
        var user = ($cookies.get('user')) ? JSON.parse($cookies.get('user')) : {};
        window.open(config.QMAIL_URL + email + '&_sid=' + user.sid, "_blank", "toolbar=yes, scrollbars=yes, resizable=yes, top=200, left=500, width=700, height=600");
    };
    function getCSSClassOnCountryCode(phones) {
        $scope.countryFlagCss = $scope.countryDialCodeWithCSSClass[phones];
        if (!$scope.countryFlagCss)
            $scope.countryFlagCss = "flag";
    }
    $scope.load_groups = function(){
        Group.getGroups('', function (response) {
            if (response.data.status) {
                $scope.groups = response.data.data.data;
            } else {
                $scope.groups = [];
            }
            $scope.getGroupStatus();
        });
    };

    $scope.getGroupStatus = function () {        
        Group.getBatchGroupStatus({ contact_ids: [contact_id] }, function (response, err) {
            var is_group_selected = false;
            if(response.data.status){
                response.data.data.forEach(function (group) {
                    if(group.status == 'all'){
                        is_group_selected = true;
                        var foundGroup = $filter('filter')($scope.groups,{_id: group.group_id});
                        if(foundGroup && foundGroup.length > 0)
                            foundGroup[0].selected = true;
                    }
                });
                if (!$scope.$$phase) $scope.$apply();
                if(is_group_selected)
                    $('.group-icon-container > i').removeClass('icon-group').addClass('icon-group-active');
            } else {
                $('.group-icon-container > i').removeClass('icon-group-active').addClass('icon-group');
            }
        });
    };
    $scope.load_groups();
}]);